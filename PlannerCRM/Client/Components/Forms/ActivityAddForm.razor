<RadzenStack>
    <RadzenTemplateForm TItem="@WorkOrderDto" EditContext="@_context">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenFieldset Text="Activity Info">
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox Name="Name" @bind-Value=@_model.name />
                    <ValidationMessage For="@(() => _model.name)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="StartDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="StartDate" @bind-Value=@_model.startDate />
                    <ValidationMessage For="@(() => _model.startDate)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="EndDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="EndDate" @bind-Value=@_model.endDate />
                    <ValidationMessage For="@(() => _model.endDate)" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
        <RadzenFieldset Text="Client and WorkOrder Info">
            <RadzenRow>
                <RadzenColumn Style="display:inline-block;">
                    <RadzenTextBox @bind-Value="@_query"
                                   Placeholder="Search workorder.."
                                   @attributes="@(new Dictionary<string, object>() { { "type", "search" }})" />
                    <RadzenButton ButtonType="ButtonType.Button"
                                  Variant="Variant.Outlined"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Icon="Search"
                                  Click="@SearchWorkOrder">
                    </RadzenButton>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDataGrid TItem="@WorkOrderDto"
                                    Data="@_workOrders"
                                    AllowFiltering="true"
                                    AllowSorting="true"
                                    SelectionMode="DataGridSelectionMode.Single"
                                    RowSelect="@SelectWorkOrder" RowDeselect="@SelectWorkOrder">
                        <Columns>
                            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.name)" Title="Name" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
            @if (_model.workOrder is not null && _model.workOrder.firmClient is not null)
            {
                <RadzenFieldset Text="Current Selected WorkOrder">
                    <RadzenRow AlignItems="AlignItems.Start">
                        <RadzenColumn>
                            <RadzenLabel Text="Client"></RadzenLabel>
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenLabel Text="WorkOrder"></RadzenLabel>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow Style="margin-top: 20px;">
                        <RadzenColumn>
                            <RadzenTextBox @bind-Value="@_model.workOrder.firmClient.name" Disabled="true"></RadzenTextBox>
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenTextBox @bind-Value="@_model.workOrder.name" Disabled="true"></RadzenTextBox>
                        </RadzenColumn>
                        <RadzenButton ButtonType="ButtonType.Button"
                                      Variant="Variant.Outlined"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Icon="Delete"
                                      Click="@(() => SelectWorkOrder(null))">
                        </RadzenButton>
                    </RadzenRow>
                </RadzenFieldset>
            }
            <ValidationMessage For="@(() => _model.workOrder.firmClient)" />
        </RadzenFieldset>
    </RadzenTemplateForm>
    <RadzenStack AlignItems="AlignItems.End">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" Text="Close" Click="(() => dialog.Close())"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Submit" Click="(() => OnSubmit())"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public DateTime StartDate { get; set; }
    [Parameter] public DateTime EndDate { get; set; }

    private ActivityDto _model;
    private string _query = string.Empty;

    private List<WorkOrderDto> _workOrders;
    private EditContext _context;

    protected override void OnInitialized()
    {
        _model = new()
            {
                startDate = StartDate,
                endDate = EndDate,
                workOrder = new()
            };
        _context = new(_model);
        _workOrders = new();
    }

    private async Task SearchWorkOrder()
    {
        try
        {
            if (!string.IsNullOrEmpty(_query))
            {
                var filter = new FilterDto()
                    {
                        searchQuery = _query
                    };

                var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_SEARCH, filter, ApiType.Post);
                if (result.hasCompleted)
                {
                    _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void SelectWorkOrder(WorkOrderDto workOrder)
    {
        _model.workOrder = workOrder;
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_INSERT, _model, ApiType.Post);

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);

                    dialog.Close();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
