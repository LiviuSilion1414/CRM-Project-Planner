<RadzenStack>
    <EditForm EditContext="@_context" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenFieldset Text="Client & WorkOrder Info">
            <RadzenRow class="mt-3">
                <RadzenColumn>
                    <RadzenLabel>WorkOrder</RadzenLabel>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDropDown TValue="Guid?"
                                    Data="_workOrders"
                                    AllowFiltering="true"
                                    Placeholder="Select workOrder"
                                    AllowClear="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    TextProperty="@nameof(WorkOrderDto.name)"
                                    ValueProperty="@nameof(WorkOrderDto.id)"
                                    @bind-Value="@Model.workOrderId"
                                    Change="@((object? guid) => SelectWorkOrder(guid))" />
                    <ValidationMessage For="@(() => Model.workOrderId)" />
                </RadzenColumn>
            </RadzenRow>
            @if (Model.workOrderId != null && Model.workOrderId != Guid.Empty)
            {
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel Text="Client" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox Name="Name" @bind-Value=@Model.workOrder.firmClient.name Disabled="true" />
                    </RadzenColumn>
                </RadzenRow>
            }
        </RadzenFieldset>
        <RadzenFieldset Text="Activity Info">
            <RadzenRow class="mt-3">
                <RadzenColumn>
                    <RadzenLabel Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox @bind-Value=@Model.name />
                    <ValidationMessage For="@(() => Model.name)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow class="mt-3">
                <RadzenColumn>
                    <RadzenLabel Text="StartDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker @bind-Value=@Model.startDate DateFormat="dd/MM/yyyy" />
                    <ValidationMessage For="@(() => Model.startDate)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow class="mt-3">
                <RadzenColumn>
                    <RadzenLabel Text="EndDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker @bind-Value=@Model.endDate DateFormat="dd/MM/yyyy" />
                    <ValidationMessage For="@(() => Model.endDate)" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
        <RadzenStack class="mt-3" AlignItems="AlignItems.Center">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Info" Text="Close" Click="Close"></RadzenButton>
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Submit"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code
{
    [Parameter] public bool IsInsert { get; set; }
    [Parameter] public ActivityDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }
    [Parameter] public EventCallback OnCloseSide { get; set; }

    private string _query = string.Empty;

    private List<WorkOrderDto> _workOrders = new();
    private EditContext _context;

    protected override async Task OnInitializedAsync()
    {
        await OnCloseSide.InvokeAsync();
        if (IsInsert)
        {
            Model = new ActivityDto()
                {
                    workOrder = new WorkOrderDto()
                    {
                        firmClient = new FirmClientDto()
                    },
                };
        }
        _context = new(Model);
        await LoadWorkOrders();
    }


    private async Task LoadWorkOrders()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_LIST, new WorkOrderFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
    private void SelectWorkOrder(object? guid)
    {
        if (guid != null && (Guid)guid != Guid.Empty)
        {
            Model.workOrder = _workOrders.SingleOrDefault(x => x.id == (Guid)guid);
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                ResultDto result = new ResultDto();
                if (IsInsert)
                {
                    result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_INSERT, Model, ApiType.Post);
                }
                else
                {
                    // Model.workOrder =
                    result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_UPDATE, Model, ApiType.Put);
                }

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);

                    dialog.Close();

                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }

        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task Close()
    {
        await OnReloadList.InvokeAsync();
        dialog.Close();
    }
}
