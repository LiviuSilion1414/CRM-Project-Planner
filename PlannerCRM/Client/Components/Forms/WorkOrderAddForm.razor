@inject DialogService ds
@inject FetchService<WorkOrderDto> fs
@inject FetchService<FirmClientDto> cfs

<RadzenStack>
    <RadzenTemplateForm TItem="@WorkOrderDto" EditContext="@_context">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenFieldset Text="WorkOrder Info">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenLabel Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox Name="Name" @bind-Value=@_model.Name />
                    <ValidationMessage For="@(() => _model.Name)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenLabel Text="StartDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="StartDate" @bind-Value=@_model.StartDate />
                    <ValidationMessage For="@(() => _model.StartDate)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn>
                    <RadzenLabel Text="EndDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="EndDate" @bind-Value=@_model.EndDate />
                    <ValidationMessage For="@(() => _model.EndDate)" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
        <RadzenFieldset Text="Client Info">
            <RadzenRow>
                <RadzenColumn Style="display:inline-block;">
                    <RadzenTextBox @bind-Value="@_query" 
                                   @attributes="@(new Dictionary<string, object>() { { "type", "search" }})" />
                    <RadzenButton ButtonType="ButtonType.Button"
                                  Variant="Variant.Outlined"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Icon="Search"
                                  Click="@SearchClient">
                    </RadzenButton>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDataGrid TItem="@FirmClientDto"
                                    Data="@_clients"
                                    AllowFiltering="true"
                                    AllowSorting="true"
                                    SelectionMode="DataGridSelectionMode.Single"
                                    RowSelect="@SelectClient" RowDeselect="@SelectClient">
                        <Columns>
                            <RadzenDataGridColumn TItem="@FirmClientDto" Property="Name" Title="Name"/>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
            @if (!string.IsNullOrEmpty(_model.FirmClient.Name))
            {
                <RadzenRow Style="margin-top: 20px;">
                    <RadzenColumn>
                        <RadzenTextBox @bind-Value="@_model.FirmClient.Name" Disabled="true" />
                        <RadzenTextBox @bind-Value="@_model.FirmClient.VatNumber" Disabled="true" />
                    </RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Button"
                                  Variant="Variant.Outlined"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Icon="Delete"
                                  Click="@(() => SelectClient(new()))">
                    </RadzenButton>
                    <ValidationMessage For="@(() => _model.FirmClient)" />
                </RadzenRow>
            }
        </RadzenFieldset>
    </RadzenTemplateForm>
    <RadzenRow AlignItems="AlignItems.Center" class="rz-mt-4">
        <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
            <RadzenButton ButtonType="ButtonType.Button" Text="Close" Click="(() => ds.Close())"></RadzenButton>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" Click="(() => OnSubmit())"></RadzenButton>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code
{
    private WorkOrderDto _model;
    private string _query = string.Empty;

    private List<FirmClientDto> _clients;
    private EditContext _context;

    protected override void OnInitialized()
    {
        _model = new()
            {
                FirmClient = new()
            };
        _context = new(_model);
        _clients = new();
    }

    private async Task SearchClient()
    {
        if (!string.IsNullOrEmpty(_query))
        {
            _clients = await cfs.GetAll(
                ControllersNames.FIRM_CLIENT,
                ClientApiManager.SearchClientByName(_query)
            );

        }
    }

    private void SelectClient(FirmClientDto client)
    {
        _model.FirmClient = client;
    }

    private async Task OnSubmit()
    {
        if (_context.Validate())
        {
            await fs.Create(
                ControllersNames.WORK_ORDER,
                CrudApiManager.ADD,
                _model
            );
            ds.Close();
        }
    }
}
