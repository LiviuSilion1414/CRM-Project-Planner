<RadzenStack>
    <RadzenCard>
        <EditForm EditContext="@_context" OnSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-control">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="@_model.name" />
                <ValidationMessage For="@(() => _model.name)" />
            </div>
            <div class="form-control">
                <label>Vat Number</label>
                <InputText class="form-control" @bind-Value="@_model.vatNumber" />
                <ValidationMessage For="@(() => _model.vatNumber)" />
            </div>
        </EditForm>
    </RadzenCard>
    <RadzenStack AlignItems="AlignItems.End" Orientation="Orientation.Horizontal">
        <button class="btn btn-outline-info" type="button" @onclick="(() => dialog.Close())">Close</button>
        <button class="btn btn-outline-primary" type="submit" @onclick="(() => OnValidSubmit())">Confirm</button>
    </RadzenStack>
</RadzenStack>

@code
{
    private FirmClientDto _model;

    private EditContext _context;

    protected override void OnInitialized()
    {
        _model = new();
        _context = new(_model);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_INSERT, _model, ApiType.Post);

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);

                    dialog.Close();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
