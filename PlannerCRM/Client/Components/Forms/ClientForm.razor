<RadzenStack>
    <RadzenCard>
        <EditForm EditContext="@_context" OnSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-control">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="@Model.name" />
                <ValidationMessage For="@(() => Model.name)" />
            </div>
            <div class="form-control">
                <label>Vat Number</label>
                <InputText class="form-control" @bind-Value="@Model.vatNumber" />
                <ValidationMessage For="@(() => Model.vatNumber)" />
            </div>
        </EditForm>
    </RadzenCard>
    <RadzenCard>
        <RadzenStack AlignItems="AlignItems.Center">
            <RadzenRow>
                <RadzenColumn Size="6">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Text="Cancel" Click="Close"></RadzenButton>
                </RadzenColumn>
                <RadzenColumn Size="6">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Save" ButtonType="ButtonType.Submit"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code
{
    [Parameter] public bool IsInsert { get; set; }
    [Parameter] public FirmClientDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }

    private EditContext _context;

    protected override void OnParametersSet()
    {
        if (IsInsert)
        {
            Model = new FirmClientDto()
            {
                workOrders = new List<WorkOrderDto>()
            };
        }
        _context = new(Model);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                ResultDto result = new ResultDto();
                if (IsInsert)
                {
                    result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_INSERT, Model, ApiType.Post);
                }
                else
                {
                    result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_UPDATE, Model, ApiType.Put);
                }

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    
                    dialog.Close();
                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task Close()
    {
        await OnReloadList.InvokeAsync();
        dialog.Close();
    }
}
