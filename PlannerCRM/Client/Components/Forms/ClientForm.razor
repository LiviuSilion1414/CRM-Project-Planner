<RadzenStack>
    <EditForm EditContext="@_context" OnSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />
        <RadzenRow class="mt-3">
            <RadzenColumn>
                <RadzenLabel>Name</RadzenLabel>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenTextBox class="form-control" @bind-Value="@Model.name" />
                <ValidationMessage For="@(() => Model.name)" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow class="mt-3">
            <RadzenColumn>
                <RadzenLabel>Vat Number</RadzenLabel>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenTextBox class="form-control" @bind-Value="@Model.vatNumber" />
                <ValidationMessage For="@(() => Model.vatNumber)" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow class="mt-3" AlignItems="AlignItems.End">
            <RadzenStack AlignItems="AlignItems.Center">
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Text="Cancel" Click="Close"></RadzenButton>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Save" ButtonType="ButtonType.Submit"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenRow>
    </EditForm>
</RadzenStack>

@code
{
    [Parameter] public bool IsInsert { get; set; }
    [Parameter] public FirmClientDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }
    [Parameter] public EventCallback OnCloseSide { get; set; }

    private EditContext _context;

    protected override async Task OnInitializedAsync()
    {
        await OnCloseSide.InvokeAsync();
        if (IsInsert)
        {
            Model = new FirmClientDto()
                {
                    workOrders = new List<WorkOrderDto>()
                };
        }
        _context = new(Model);
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                ResultDto result = new ResultDto();
                if (IsInsert)
                {
                    result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_INSERT, Model, ApiType.Post);
                }
                else
                {
                    result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_UPDATE, Model, ApiType.Put);
                }

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);

                    dialog.Close();
                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    void Close()
    {
        dialog.Close();
    }
}
