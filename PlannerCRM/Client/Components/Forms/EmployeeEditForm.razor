@page "/employee-add"

@layout MainLayout

@attribute [Authorize]

<RadzenStack JustifyContent="JustifyContent.Center">
    <RadzenCard>
        <RadzenFieldset Text="Employee">
            <EditForm EditContext="_context" OnSubmit="Submit">
                <DataAnnotationsValidator />
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenLabel>Name</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.name"/>
                        <ValidationMessage For="@(() => Model.name)"/>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenLabel>Email</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.email" />
                        <ValidationMessage For="@(() => Model.email)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenLabel>Phone</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.phone" />
                        <ValidationMessage For="@(() => Model.phone)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenLabel>Password</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.password" />
                       <ValidationMessage For="@(() => Model.password)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn>
                        <RadzenLabel>Assign Roles</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@roleName" />
                        <ValidationMessage For="@(() => roleName)" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenButton Icon="add_circle_outline" Click="AssignRole"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow>
                    <RadzenFieldset Text="Roles">
                        <RadzenColumn>
                            <RadzenDataGrid TItem="RoleDto"
                                            Data="Model.roles"
                                            AllowSorting="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.roleName)" Title="Ruolo" />
                                    <RadzenDataGridColumn>
                                        <Template Context="data">
                                            <RadzenButton Icon="delete" IconColor="@Colors.Danger" Click="@(() => RemoveRole(data))"></RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                    </RadzenFieldset>
                </RadzenRow>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Save" Click="Submit"></RadzenButton>
            </EditForm>
        </RadzenFieldset>
    </RadzenCard>
</RadzenStack>

@code 
{
    [Parameter] public EmployeeDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }

    EditContext _context;

    [Required]
    string roleName = string.Empty;
    
    protected override void OnInitialized()
    {
        Model = new();
        _context = new(Model);
    }

    void AssignRole()
    {
        if (Model.roles.Where(x => x.roleName.Equals(roleName)).Any())
        {
            notification.Notify(NotificationSeverity.Warning, "Role already present", null, 4000);
        }
        else
        {
            Model.roles.Add(new RoleDto() { roleName = roleName });
        }
    }

    void RemoveRole(RoleDto role)
    {
        Model.roles.Remove(role);
    }

    async Task Submit()
    {
        try
        {
            if (_context.Validate())
            {
                var result = await fetch.ExecuteAsync(ApiUrl.EMPLOYEE_CONTROLLER, ApiUrl.EMPLOYEE_UPDATE, Model, ApiType.Put);

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
