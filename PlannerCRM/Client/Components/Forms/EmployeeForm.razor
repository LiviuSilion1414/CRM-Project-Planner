@layout MainLayout

@attribute [Authorize]

<RadzenStack JustifyContent="JustifyContent.Center">
    <RadzenCard>
        <RadzenFieldset Text="Employee">
            <EditForm EditContext="@_context" OnSubmit="Submit">
                <DataAnnotationsValidator />
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel>Name</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.name"/>
                        <ValidationMessage For="@(() => Model.name)"/>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel>Email</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.email" />
                        <ValidationMessage For="@(() => Model.email)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel>Phone</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.phone" />
                        <ValidationMessage For="@(() => Model.phone)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel>Password</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <InputText class="form-control" @bind-Value="@Model.password" />
                       <ValidationMessage For="@(() => Model.password)" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="mt-3">
                    <RadzenColumn>
                        <RadzenLabel>Assign Roles</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenDropDown TValue="RoleDto" Data="@roles" TextProperty="@nameof(RoleDto.roleName)" Change="@((role) => AssignRole(role))" AllowFiltering="true" Style="width: 40vw;"/>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="mt-3">
                    <RadzenFieldset Text="Roles">
                        <RadzenColumn>
                            <RadzenDataGrid @ref="grid"
                                            TItem="RoleDto"
                                            Data="@Model.roles"
                                            AllowSorting="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.roleName)" Title="Role Name" />
                                    <RadzenDataGridColumn TItem="RoleDto" Width="64px">
                                        <Template Context="data">
                                            <RadzenButton Icon="delete" IconColor="@Colors.Danger" Click="@(() => RemoveRole(data))"></RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenColumn>
                    </RadzenFieldset>
                </RadzenRow>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Save" ButtonType="ButtonType.Submit"></RadzenButton>
            </EditForm>
        </RadzenFieldset>
    </RadzenCard>
</RadzenStack>

@code 
{
    [Parameter] public bool IsInsert { get; set; }
    [Parameter] public EmployeeDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }

    EditContext _context;
    List<RoleDto> roles = new();
    RadzenDataGrid<RoleDto> grid;

    protected override async Task OnInitializedAsync()
    {
        if (IsInsert)
        {
            Model = new EmployeeDto()
            {
                roles = new List<RoleDto>()
            };
        }
        _context = new(Model);
        await LoadData();
    }

    void AssignRole(object role)
    {
        if (!Model.roles.Contains((RoleDto)role))
        {
            Model.roles.Add(new RoleDto() {  id = ((RoleDto)role).id, roleName = ((RoleDto)role).roleName });
            grid.Reload();
        }
    }

    void RemoveRole(RoleDto role)
    {
        Model.roles.Remove(role);
        grid.Reload();
        notification.Notify(NotificationSeverity.Success, "Role removed", null, 4000);
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_LIST, new RoleFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                roles = JsonSerializer.Deserialize<List<RoleDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task Submit()
    {
        try
        {
            if (_context.Validate())
            {
                ResultDto result = new ResultDto();
                if (IsInsert)
                {
                    result = await fetch.ExecuteAsync(ApiUrl.EMPLOYEE_CONTROLLER, ApiUrl.EMPLOYEE_INSERT, Model, ApiType.Post);
                }
                else
                {
                    result = await fetch.ExecuteAsync(ApiUrl.EMPLOYEE_CONTROLLER, ApiUrl.EMPLOYEE_UPDATE, Model, ApiType.Put);
                }

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
