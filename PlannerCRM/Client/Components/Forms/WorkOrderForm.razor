<RadzenStack>
    <EditForm EditContext="@_workOrdercontext" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenRow>
            <RadzenColumn>
                <RadzenFieldset Text="WorkOrder Info">
                    <RadzenRow class="mb-3">
                        <RadzenColumn>
                            <RadzenLabel Text="Name" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenTextBox class="w-100" @bind-Value=@Model.name />
                            <ValidationMessage For="@(() => Model.name)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow class="mb-3">
                        <RadzenColumn>
                            <RadzenLabel Text="StartDate" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenDatePicker class="w-100" @bind-Value=@Model.startDate DateFormat="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => Model.startDate)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow class="mb-3">
                        <RadzenColumn>
                            <RadzenLabel Text="EndDate" />
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenDatePicker class="w-100" @bind-Value=@Model.endDate DateFormat="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => Model.endDate)" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenFieldset Text="Client Info">
                    <RadzenDropDown TValue="Guid?"
                    class="form-control" Style="min-width: 20vw;"
                    Data="_clients"
                    AllowFiltering="true"
                    Placeholder="Select client"
                    AllowClear="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    TextProperty="@nameof(FirmClientDto.name)"
                    ValueProperty="@nameof(FirmClientDto.id)"
                    @bind-Value="@Model.firmClientId"
                    Change="@((object? guid) => SelectClient(guid))" />
                    @if (Model.firmClient == null || Model.firmClientId == Guid.Empty || Model.firmClient.id == Guid.Empty)
                    {
                        <RadzenRow>
                            <RadzenColumn>
                                <b>Please select a client from the list</b>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                    else
                    {
                        <RadzenRow class="mb-3">
                            <RadzenColumn>
                                <RadzenLabel Text="Name" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText Text=@Model.firmClient.name />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow class="mb-3">
                            <RadzenColumn>
                                <RadzenLabel Text="Vat Number" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText Text=@Model.firmClient.vatNumber />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="1">
                                <RadzenButton IconColor="@Colors.Danger" 
                                Icon="delete" 
                                ButtonStyle="ButtonStyle.Primary" 
                                Variant="Variant.Text"
                                Text="Remove"
                                Click="@(() => SelectClient(Guid.Empty))"></RadzenButton>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                    <ValidationMessage For="@(() => Model.firmClientId)" />
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>

        @if (!IsInsert)
        {
            <RadzenFieldset Text="Related Activities">
                <EditForm EditContext="_activityContext" Context="_activityContext" OnValidSubmit="AddActivity">
                    <DataAnnotationsValidator />
                    <RadzenRow>
                        <RadzenColumn Size="3">
                            <RadzenLabel Text="Name"></RadzenLabel>
                            <InputText @bind-Value="@activityModel.name" />
                            <ValidationMessage For="@(() => activityModel.name)" />
                        </RadzenColumn>
                        <RadzenColumn Size="3">
                            <RadzenLabel Text="Start Date"></RadzenLabel>
                            <RadzenDatePicker @bind-Value="@activityModel.startDate" DateFormat="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => activityModel.endDate)" />
                        </RadzenColumn>
                        <RadzenColumn Size="3">
                            <RadzenLabel Text="End Date"></RadzenLabel>
                            <RadzenDatePicker @bind-Value="@activityModel.endDate" DateFormat="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => activityModel.endDate)" />
                        </RadzenColumn Size="3">
                        <RadzenColumn>
                            <RadzenButton Icon="add_circle_outline" Text="Add activity" Click="AddActivity"></RadzenButton>
                        </RadzenColumn>
                    </RadzenRow>
                </EditForm>
                <RadzenRow>
                    <RadzenDataGrid TItem="ActivityDto"
                    @ref="grid"
                    Data="Model.activities"
                    AllowPaging="true"
                    PageSize="5">
                        <Columns>
                            <RadzenDataGridColumn TItem="@ActivityDto" Property="@nameof(ActivityDto.name)" Title="Name" />
                            <RadzenDataGridColumn TItem="@ActivityDto" Property="@nameof(ActivityDto.startDateString)" Title="Start Date" />
                            <RadzenDataGridColumn TItem="@ActivityDto" Property="@nameof(ActivityDto.endDateString)" Title="End Date" />
                            <RadzenDataGridColumn TItem="@ActivityDto" Width="64px" Sortable="false" Filterable="false">
                                <Template Context="data">
                                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Danger" Icon="delete" Click="@(() => DeleteActivity(data))"></RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenRow>
            </RadzenFieldset>
        }
        <RadzenStack AlignItems="AlignItems.Center" class="mt-3">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Text="Close" Click="Close"></RadzenButton>
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Submit"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </EditForm>
</RadzenStack>

@code
{
    [Parameter] public bool IsInsert { get; set; }
    [Parameter] public WorkOrderDto Model { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }
    [Parameter] public EventCallback OnCloseSide { get; set; }

    private string _query = string.Empty;

    private List<FirmClientDto> _clients = new();
    private EditContext _workOrdercontext;
    private EditContext _activityContext;
    private ActivityDto activityModel = new();
    private RadzenDataGrid<ActivityDto> grid = new();

    protected override async Task OnInitializedAsync()
    {
        await OnCloseSide.InvokeAsync();
        if (IsInsert)
        {
            Model = new WorkOrderDto()
                {
                    firmClient = new FirmClientDto()
                };
        }
        else
        {
            _activityContext = new(activityModel);
        }
        _workOrdercontext = new(Model);
        await LoadClients();
    }

    async Task AddActivity()
    {
        try
        {
            activityModel.workOrder = Model;
            activityModel.workOrderId = Model.id;
            if (_activityContext.Validate())
            {
                if (!Model.activities.Contains(activityModel))
                {
                    var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_INSERT,
                                                          activityModel,
                                                          ApiType.Post);
                    if (result.hasCompleted && result.messageType == MessageType.Success)
                    {
                        notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                        await LoadData();
                        await grid.Reload();
                        await OnReloadList.InvokeAsync();
                    }
                    else
                    {
                        notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                    }
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Success, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task DeleteActivity(ActivityDto activity)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete activity", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_DELETE,
                                                      new ActivityFilterDto() { activityId = activity.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task LoadClients()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, new FirmClientFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new WorkOrderFilterDto
                {
                    workOrderId = Model.id
                };

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_GET, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                Model = JsonSerializer.Deserialize<WorkOrderDto>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void SelectClient(object? clientId)
    {
        if (clientId != null)
        {
            if ((Guid)clientId != Guid.Empty)
            {
                Model.firmClient = _clients.SingleOrDefault(x => x.id == (Guid)clientId) ?? new();
                Model.firmClientId = _clients.SingleOrDefault(x => x.id == (Guid)clientId).id;
            }
            else
            {
                Model.firmClient = null;
                Model.firmClientId = null;
            }
        }
        else
        {
            Model.firmClient = null;
            Model.firmClientId = null;
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_workOrdercontext.Validate())
            {
                ResultDto result = new ResultDto();
                if (IsInsert)
                {
                    result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_INSERT, Model, ApiType.Post);
                }
                else
                {
                    activityModel.workOrderId = Model.id;

                    result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_UPDATE, Model, ApiType.Put);
                }

                if (result.hasCompleted && result.statusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);

                    dialog.Close();
                    await OnReloadList.InvokeAsync();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    void Close()
    {
        dialog.Close();
    }
}