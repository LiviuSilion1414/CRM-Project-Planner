<RadzenStack>
    <RadzenTemplateForm TItem="@WorkOrderDto" EditContext="@_context">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <RadzenFieldset Text="WorkOrder Info">
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox Name="Name" @bind-Value=@Model.Name />
                    <ValidationMessage For="@(() => Model.Name)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="StartDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="StartDate" @bind-Value=@Model.StartDate />
                    <ValidationMessage For="@(() => Model.StartDate)" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow Style="margin-bottom: 5px;">
                <RadzenColumn>
                    <RadzenLabel Text="EndDate" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDatePicker Name="EndDate" @bind-Value=@Model.EndDate />
                    <ValidationMessage For="@(() => Model.EndDate)" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
        <RadzenFieldset Text="Client Info">
            <RadzenRow>
                <RadzenColumn Style="display:inline-block;">
                    <RadzenTextBox @bind-Value="@_query"
                    @attributes="@(new Dictionary<string, object>() { { "type", "search" }})" />
                    <RadzenButton ButtonType="ButtonType.Button"
                    Variant="Variant.Outlined"
                    ButtonStyle="ButtonStyle.Primary"
                    Icon="Search"
                    Click="@SearchClient">
                    </RadzenButton>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDataGrid TItem="@FirmClientDto"
                    Data="@_clients"
                    AllowFiltering="true"
                    AllowSorting="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="@SelectClient" RowDeselect="@SelectClient">
                        <Columns>
                            <RadzenDataGridColumn TItem="@FirmClientDto" Property="Name" Title="Name" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
            @if (!string.IsNullOrEmpty(Model.FirmClient.Name))
            {
                <RadzenRow Style="margin-top: 20px;">
                    <RadzenColumn>
                        <RadzenTextBox @bind-Value="@Model.FirmClient.Name" Disabled="true" />
                        <RadzenTextBox @bind-Value="@Model.FirmClient.VatNumber" Disabled="true" />
                    </RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Button"
                    Variant="Variant.Outlined"
                    ButtonStyle="ButtonStyle.Danger"
                    Icon="Delete"
                    Click="@(() => SelectClient(new()))">
                    </RadzenButton>
                    <ValidationMessage For="@(() => Model.FirmClient)" />
                </RadzenRow>
            }
        </RadzenFieldset>
    </RadzenTemplateForm>
    <RadzenStack AlignItems="AlignItems.End">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Text="Close" Click="(() => dialog.Close())"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Submit" Click="(() => OnSubmit())"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public WorkOrderDto Model { get; set; }

    private string _query = string.Empty;

    private List<FirmClientDto> _clients;
    private EditContext _context;

    protected override void OnInitialized()
    {
        _context = new(Model);
        _clients = new();
    }

    private async Task SearchClient()
    {
        try
        {
            if (!string.IsNullOrEmpty(_query))
            {
                var filter = new FilterDto()
                {
                    SearchQuery = _query
                };

                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_SEARCH, filter, ApiType.Post);
                if (result.HasCompleted && result.StatusCode == HttpStatusCode.OK)
                {
                    _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.Data.ToString());
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.Message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void SelectClient(FirmClientDto client)
    {
        Model.FirmClient = client;
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_context.Validate())
            {
                var filter = new FilterDto()
                {
                    Data = Model
                };

                var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_UPDATE, filter, ApiType.Put);

                if (result.HasCompleted && result.StatusCode == HttpStatusCode.OK)
                {
                    notification.Notify(NotificationSeverity.Success, result.Message, null, 4000);

                    dialog.Close();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.Message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
