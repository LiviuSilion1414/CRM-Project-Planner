<div class="modal @Size" tabindex="-1" style="display:block; z-index: 100;" hidden="@_hidden">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@CloseModal"></button>
            </div>
            <div class="modal-body">
                @BodyMessage
                @Body
            </div>
            <div class="modal-footer">
                @if (FirstAction is null || SecondAction is null)
                {
                    <div style="float: left;">
                        <button type="button" class="btn btn-outline-info" @onclick="@CloseModal">@_closeModal</button>
                    </div>
                }
                <div style="float: right;">
                    <button type="button" class="btn btn-outline-success" @onclick="@OnFirstAction" hidden="@(FirstAction is null)">@FirstActionText</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="@OnSecondAction" hidden="@(SecondAction is null)">@SecondActionText</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string Size { get; set; } = ModalSize.DEFAULT;
    [Parameter] public RenderFragment Body { get; set; }
    [Parameter] public string BodyMessage { get; set; }
    [Parameter] public bool CanCloseModal { get; set; }
    [Parameter] public Action FirstAction { get; set; }
    [Parameter] public string FirstActionText { get; set; }
    [Parameter] public Action SecondAction { get; set; }
    [Parameter] public string SecondActionText { get; set; }

    private string _closeModal = "Close";
    private bool _hidden = false;

    private void CloseModal() => _hidden = !_hidden;

    protected override void OnParametersSet()
    {
        if (CanCloseModal)
        {
            CloseModal();
        }
    }

    private void OnFirstAction() => FirstAction?.Invoke();

    private void OnSecondAction() => SecondAction?.Invoke();
}