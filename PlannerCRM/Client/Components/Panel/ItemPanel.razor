@typeparam TItem where TItem : class, new()

<Modal Size="@ModalSize.LARGE" Title="@Title"
       FirstActionText="Edit" SecondActionText="Delete"
       FirstAction="@(async () => await OnEdit.InvokeAsync())"
       SecondAction="@(async () => await OnDelete.InvokeAsync())"
       OnModalClose="@(async () => await OnPanelClose.InvokeAsync())">
    <Body>
        @foreach (var property in Properties)
        {
            <p>@(property): <strong>@GetObjectValue(property)</strong></p>
        }
        @Content
    </Body>
</Modal>

@code {
    [Parameter] public string Title { get; set; } = "Item details";
    [Parameter] public TItem Item { get; set; }
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public RenderFragment Content { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnPanelClose { get; set; }

    private object GetObjectValue(string propertyName)
        => Item
            .GetType()
            .GetProperty(propertyName)
            .GetValue(Item);
}
