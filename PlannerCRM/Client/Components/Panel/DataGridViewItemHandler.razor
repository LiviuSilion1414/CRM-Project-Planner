@typeparam TItem where TItem : class, new()

@if (DataContainer.IsAddSelected)
{
    <FormView Title="Add new item " TItem="@TItem" Model="@DataContainer.NewItem" OnItemChanged="@OnItemDataAdded">
        <FormContent>
            @AddFormMarkup(DataContainer.NewItem)
        </FormContent>
    </FormView>
}

@if (DataContainer.IsUpdateSelected)
{
    <FormView Title="Edit new item " TItem="@TItem" Model="@DataContainer.SelectedItem" OnItemChanged="@OnItemDataUpdated">
        <FormContent>
            @EditFormMarkup(DataContainer.SelectedItem)
        </FormContent>
    </FormView>
}

@if (DataContainer.IsDeleteSingleItemSelected)
{
    <AlertComponent Title="Sure to delete this item?"
    BodyMessage="The action is irreversible!"
    IsDeleteConfirmed="@OnItemDeleteConfirmation" />
}

@if (DataContainer.IsDeleteMultipleSelected)
{
    <AlertComponent Title="Sure to delete this item?"
    BodyMessage="The action is irreversible!"
    IsDeleteConfirmed="@OnMultipleItemsDeleteConfirmation" />
}

@if (DataContainer.IsOperationDone)
{
    <Toast />
}

@code
{
    [CascadingParameter] public CascadingDataContainer<TItem> DataContainer { get; set; }

    [Parameter] public RenderFragment<TItem> AddFormMarkup { get; set; }
    [Parameter] public RenderFragment<TItem> EditFormMarkup { get; set; }
    [Parameter] public Action<TItem> AddAction { get; set; }
    [Parameter] public Action<TItem> UpdateAction { get; set; }
    [Parameter] public Action<TItem> DeleteAction { get; set; }
    [Parameter] public Action<IEnumerable<TItem>> DeleteMultipleAction { get; set; }

    private DataGridView<TItem> _grid = new();

    private void OnItemDataAdded(TItem item)
    {
        DataContainer.NewItem = item;
        AddAction.Invoke(item);
    }

    private void OnItemDataUpdated(TItem item)
    {
        DataContainer.SelectedItem = item;
        UpdateAction.Invoke(item);
    }

    private void OnItemDeleteConfirmation(bool isConfirmed)
    {
        DataContainer.IsDeleteSingleItemSelected = !DataContainer.IsDeleteSingleItemSelected;
        DeleteAction.Invoke(DataContainer.SelectedItem);
    }

    private void OnMultipleItemsDeleteConfirmation(bool isConfirmed)
    {
        DataContainer.IsDeleteMultipleSelected = !DataContainer.IsDeleteMultipleSelected;
        DeleteMultipleAction.Invoke(DataContainer.SelectedItems);
    }

    private void ToggleAddItem()
    {
        DataContainer.NewItem = new();
        DataContainer.IsAddSelected = !DataContainer.IsAddSelected;
    }

    private void ToggleSelectedItems(List<TItem> items)
    {
        DataContainer.SelectedItems = items;
        DataContainer.IsItemSelected = !DataContainer.IsItemSelected;
    }

    private void ToggleSelectedItemsForDelete(List<TItem> items)
    {
        DataContainer.IsDeleteMultipleSelected = !DataContainer.IsDeleteMultipleSelected;
    }

    private void ToggleSelectItem(TItem item)
    {
        DataContainer.SelectedItem = item;
        DataContainer.IsItemSelected = !DataContainer.IsItemSelected;
    }

    private void ToggleEditItem(TItem item)
    {
        DataContainer.SelectedItem = item;
        DataContainer.IsUpdateSelected = !DataContainer.IsUpdateSelected;
    }

    private void ToggleDeleteItem(TItem item)
    {
        DataContainer.SelectedItem = item;
        DataContainer.IsDeleteSingleItemSelected = !DataContainer.IsDeleteSingleItemSelected;
    }
}
