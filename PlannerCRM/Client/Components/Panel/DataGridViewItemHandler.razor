@typeparam TItem where TItem : class, new()
@typeparam TTemp where TTemp : class, new()

@if (DataContainer.ActionStateManager.IsViewSelected)
{
    <ItemPanel TItem="@TItem" 
    Item="@DataContainer.DataManager.SelectedItem"
    Properties="@DataContainer.DataManager.SelectedProperties"
    OnEdit="@(() => ToggleEditItem(DataContainer.DataManager.SelectedItem))"
    OnDelete="@(() => ToggleDeleteItem(DataContainer.DataManager.SelectedItem))">
        <Content>
            @ViewDetailsMarkup(DataContainer.DataManager.SelectedItem)
        </Content>
    </ItemPanel>
}

@if (DataContainer.ActionStateManager.IsAddSelected)
{
    <FormView Title="Add new item " TItem="@TItem" Model="@DataContainer.DataManager.NewItem" OnItemChanged="@OnItemDataAdded">
        <FormContent>
            @AddFormMarkup(DataContainer.DataManager.NewItem)
        </FormContent>
    </FormView>
}

@if (DataContainer.ActionStateManager.IsUpdateSelected)
{
    <FormView Title="Edit new item " TItem="@TItem" Model="@DataContainer.DataManager.SelectedItem" OnItemChanged="@OnItemDataUpdated">
        <FormContent>
            @EditFormMarkup(DataContainer.DataManager.SelectedItem)
        </FormContent>
    </FormView>
}

@if (DataContainer.ActionStateManager.IsDeleteSingleSelected)
{
    <AlertComponent Title="Sure to delete this item?"
    BodyMessage="The action is irreversible!"
    IsDeleteConfirmed="@OnItemDeleteConfirmation" />
}

@if (DataContainer.ActionStateManager.IsDeleteMultipleSelected)
{
    <AlertComponent Title="Sure to delete this item?"
    BodyMessage="The action is irreversible!"
    IsDeleteConfirmed="@OnMultipleItemsDeleteConfirmation" />
}

@if (DataContainer.ActionStateManager.IsOperationDone)
{
    <Toast />
}

@code
{
    [CascadingParameter] public CascadingDataContainer<TItem, TTemp> DataContainer { get; set; }
    [Parameter] public RenderFragment<TItem> AddFormMarkup { get; set; }
    [Parameter] public RenderFragment<TItem> EditFormMarkup { get; set; }
    [Parameter] public RenderFragment<TItem> ViewDetailsMarkup { get; set; }
    [Parameter] public Action<TItem> AddAction { get; set; }
    [Parameter] public Action<TItem> UpdateAction { get; set; }
    [Parameter] public Action<TItem> DeleteAction { get; set; }
    [Parameter] public Action<IEnumerable<TItem>> DeleteMultipleAction { get; set; }

    private DataGridView<TItem, TTemp> _grid = new();

    private void OnItemDataAdded(TItem item)
    {
        DataContainer.DataManager.NewItem = item;
        AddAction.Invoke(item);
    }

    private void OnItemDataUpdated(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        UpdateAction.Invoke(item);
    }

    private void OnItemDeleteConfirmation(bool isConfirmed)
    {
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteSingle);
        DeleteAction.Invoke(DataContainer.DataManager.SelectedItem);
    }

    private void OnMultipleItemsDeleteConfirmation(bool isConfirmed)
    {
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteMultiple);
        DeleteMultipleAction.Invoke(DataContainer.DataManager.SelectedItems);
    }

    private void ToggleAddItem()
    {
        DataContainer.DataManager.NewItem = new();
        DataContainer.ActionStateManager.SetAction(ActionType.Add);
    }

    private void ToggleSelectedItemsForDelete(List<TItem> items)
    {
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteMultiple);
    }

    private void ToggleSelectItem(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        DataContainer.ActionStateManager.SetAction(ActionType.View);
    }

    private void ToggleEditItem(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        DataContainer.ActionStateManager.SetAction(ActionType.Update);
    }

    private void ToggleDeleteItem(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteSingle);
    }
}
