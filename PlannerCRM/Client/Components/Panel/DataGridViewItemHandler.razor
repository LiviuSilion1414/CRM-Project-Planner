@typeparam TItem where TItem : class, new()

@if (DataContainer is not null && DataContainer.ActionStateManager is not null) 
{
    @if (DataContainer.ActionStateManager.IsViewSelected)
    {
        <ItemPanel TItem="@TItem" 
        Item="@DataContainer.DataManager.SelectedItem"
        Properties="@DataContainer.DataManager.SelectedProperties"
        OnEdit="@(() => ToggleEditItem(DataContainer.DataManager.SelectedItem))"
        OnDelete="@(() => ToggleDeleteItem(DataContainer.DataManager.SelectedItem))">
            <Content>
                @ViewDetailsMarkup(DataContainer.DataManager.SelectedItem)
            </Content>
        </ItemPanel>
    }

    else if (DataContainer.ActionStateManager.IsAddSelected)
    {
        <FormView Title="Add new item " TItem="@TItem" Model="@DataContainer.DataManager.NewItem" OnItemChanged="@OnItemDataAdded">
            <FormContent>
                @AddFormMarkup(DataContainer.DataManager.NewItem)
            </FormContent>
        </FormView>
    }

    else if (DataContainer.ActionStateManager.IsUpdateSelected)
    {
        <FormView Title="Edit new item " TItem="@TItem" Model="@DataContainer.DataManager.SelectedItem" OnItemChanged="@OnItemDataUpdated">
            <FormContent>
                @EditFormMarkup(DataContainer.DataManager.SelectedItem)
            </FormContent>
        </FormView>
    }

    else if (DataContainer.ActionStateManager.IsDeleteSingleSelected)
    {
        <AlertComponent Title="Sure to delete this item?"
        BodyMessage="The action is irreversible!"
        IsDeleteConfirmed="@OnItemDeleteConfirmation" />
    }

    else if (DataContainer.ActionStateManager.IsDeleteMultipleSelected)
    {
        <AlertComponent Title="Sure to delete this item?"
        BodyMessage="The action is irreversible!"
        IsDeleteConfirmed="@OnMultipleItemsDeleteConfirmation" />
    }

    else if (DataContainer.ActionStateManager.IsOperationDone)
    {
        <Toast />
    }

    else
    { }
}

@code
{
    [CascadingParameter] public CascadingDataContainer<TItem> DataContainer { get; set; }
    [Parameter] public RenderFragment<TItem> AddFormMarkup { get; set; }
    [Parameter] public RenderFragment<TItem> EditFormMarkup { get; set; }
    [Parameter] public RenderFragment<TItem> ViewDetailsMarkup { get; set; }
    [Parameter] public Action<TItem> AddAction { get; set; }
    [Parameter] public Action<TItem> UpdateAction { get; set; }
    [Parameter] public Action<TItem> DeleteAction { get; set; }
    [Parameter] public Action<IEnumerable<TItem>> DeleteMultipleAction { get; set; }

    private void OnItemDataAdded(TItem item)
    {
        DataContainer.DataManager.NewItem = item;
        AddAction.Invoke(item);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private void OnItemDataUpdated(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        UpdateAction.Invoke(item);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private void OnItemDeleteConfirmation(bool isConfirmed)
    {
        DeleteAction.Invoke(DataContainer.DataManager.SelectedItem);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private void OnMultipleItemsDeleteConfirmation(bool isConfirmed)
    {
        DeleteMultipleAction.Invoke(DataContainer.DataManager.SelectedItems);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private void ToggleEditItem(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        DataContainer.ActionStateManager.SetAction(ActionType.Update);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private void ToggleDeleteItem(TItem item)
    {
        DataContainer.DataManager.SelectedItem = item;
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteSingle);
    }
}
