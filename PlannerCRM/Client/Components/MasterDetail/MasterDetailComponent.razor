@typeparam TItem

<div class="master-detail-container">
    <div class="master-container">
        @MasterContent(default(TItem))
    </div>
    <div class="side-container">
        <div class="detail-container">
            <RadzenPanel class="radzen-panel">
                @DetailContent(default(TItem))
                @if(ShowOps)
                {
                    <div class="edit-delete-btns-container">
                        <div class="delete-btn">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@OnDelete" />
                        </div>
                        <div class="edit-btn">
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Edit" Click="@OnEdit" />
                        </div>
                    </div>
                }
            </RadzenPanel>
        </div>
        <div class="additional-data-container">
            @AdditionalContent(default(TItem))
        </div>
    </div>
</div>

@code 
{
    [Parameter] public RenderFragment<TItem> MasterContent { get; set; }
    [Parameter] public RenderFragment<TItem> DetailContent { get; set; }
    [Parameter] public RenderFragment<TItem> AdditionalContent { get; set; }
    [Parameter] public EventCallback<bool> EditSelected { get; set; }
    [Parameter] public EventCallback<bool> DeleteSelected { get; set; }
    [Parameter] public bool ShowOps { get; set; }

    private bool _isEditClicked = false;
    private bool _isDeleteClicked = false;

    private async Task OnEdit() 
    {
        _isEditClicked = !_isEditClicked;
        await EditSelected.InvokeAsync(_isEditClicked);
    }

    private async Task OnDelete() 
    {
        _isDeleteClicked = !_isDeleteClicked;
        await DeleteSelected.InvokeAsync(_isDeleteClicked);
    }
}