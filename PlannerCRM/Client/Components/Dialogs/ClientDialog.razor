<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenStack>
        <RadzenRow>
            <RadzenFieldset Text="Client Info">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.H6">Name: @SelectedClient.name</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">Vat Number: @SelectedClient.vatNumber</RadzenText>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
        <RadzenRow>
            <RadzenFieldset Text="Related WorkOrders">
                <RadzenColumn>
                    <RadzenDataGrid TItem="@WorkOrderDto"
                    Data="@SelectedClient.workOrders"
                    AllowPaging="true"
                    AllowFiltering="true">
                        <Columns>
                            <RadzenDataGridColumn Title="Name" Property="@nameof(WorkOrderDto.name)" />
                            <RadzenDataGridColumn Title="Start Date" Property="@nameof(WorkOrderDto.startDateString)" />
                            <RadzenDataGridColumn Title="End Date" Property="@nameof(WorkOrderDto.endDateString)" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
    </RadzenStack>
    <RadzenStack AlignItems="AlignItems.End">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Text="Delete" Click="OnDelete"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Edit" Click="OnEdit"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public EventCallback OnReloadList { get; set; }
    [Parameter] public FirmClientDto SelectedClient { get; set; }

    private async Task OnEdit()
    {
        await dialog.OpenAsync<ClientForm>("Edit client",
            new Dictionary<string, object>()
            {
                { nameof(ClientForm.Model), SelectedClient },
                { nameof(ClientForm.IsInsert), false },
                { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, InvokeReloadList) }
            },
            new DialogOptions() { Width = "80vw;", Height = "90vh", }
        );
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_GET, new FirmClientFilterDto() { firmClientId = SelectedClient.id }, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                SelectedClient = JsonSerializer.Deserialize<FirmClientDto>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnDelete()
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete client", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_DELETE, 
                                                      new FirmClientFilterDto() { firmClientId = SelectedClient.id }, 
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await InvokeReloadList();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task InvokeReloadList()
    {
        await OnReloadList.InvokeAsync();
        await LoadData();
    }
}
