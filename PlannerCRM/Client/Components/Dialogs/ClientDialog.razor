@inject DialogService ds
@inject FetchService<FirmClientDto> fs
@inject FetchService<WorkOrderDto> wfs

<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenStack>
        <RadzenRow>
            <RadzenFieldset Text="Client Info">
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.H6">Name: @SelectedClient.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6">Vat Number: @SelectedClient.VatNumber</RadzenText>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
        <RadzenRow>
            <RadzenFieldset Text="Related WorkOrders">
                <RadzenColumn>
                    <RadzenDataGrid TItem="@WorkOrderDto"
                    Data="@SelectedClient.WorkOrders"
                    AllowPaging="true"
                    AllowFiltering="true">
                        <Columns>
                            <RadzenDataGridColumn Title="@nameof(WorkOrderDto.Name)" Property="@nameof(WorkOrderDto.Name)" />
                            <RadzenDataGridColumn Title="@nameof(WorkOrderDto.StartDate)" Property="@nameof(WorkOrderDto.StartDate)" />
                            <RadzenDataGridColumn Title="@nameof(WorkOrderDto.EndDate)" Property="@nameof(WorkOrderDto.EndDate)" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
    </RadzenStack>
    <RadzenStack AlignItems="AlignItems.End">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Text="Delete" Click="OnDelete"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Edit" Click="OnEdit"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public FirmClientDto SelectedClient { get; set; }

    private async Task OnEdit()
    {
        await ds.OpenAsync<ClientEditForm>("Edit client",
            new Dictionary<string, object>()
                {
                { nameof(ClientEditForm.Model), SelectedClient }
                }
        );
    }

    private async Task OnDelete()
    {
        await ds.OpenAsync<ClientAlertDeleteDialog>("Delete item",
            new Dictionary<string, object>()
                {
                { nameof(ClientAlertDeleteDialog.Model), SelectedClient }
                }
        );
    }
}
