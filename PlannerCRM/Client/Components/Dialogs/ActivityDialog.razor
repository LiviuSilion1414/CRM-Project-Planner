<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenStack>
        <RadzenRow class="mt-3">
            <RadzenFieldset Text="Activity Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.name</RadzenText>
                    <RadzenText>Start Date: @SelectedActivity.startDateString</RadzenText>
                    <RadzenText>End Date: @SelectedActivity.endDateString</RadzenText>
                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@OnEdit"></RadzenButton>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
        <RadzenRow class="mt-3">
            <RadzenFieldset Text="Client Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.workOrder.firmClient.name</RadzenText>
                    <RadzenText>Vat Number: @SelectedActivity.workOrder.firmClient.vatNumber</RadzenText>
                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@(() => OpenClientDetails(SelectedActivity.workOrder.firmClient))"></RadzenButton>
                </RadzenColumn>
            </RadzenFieldset>
            <RadzenFieldset Text="Work Order Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.workOrder.name</RadzenText>
                    <RadzenText>Start Date: @SelectedActivity.workOrder.startDateString</RadzenText>
                    <RadzenText>End Date: @SelectedActivity.workOrder.endDateString</RadzenText>
                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@(() => OpenWorkOrderDetails(SelectedActivity.workOrder))"></RadzenButton>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
    </RadzenStack>
    <RadzenStack AlignItems="AlignItems.Center">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Text="Delete" Click="OnDelete"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Edit" Click="OnEdit"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public ActivityDto SelectedActivity { get; set; }
    [Parameter] public EventCallback OnReloadList { get; set; }
    [Parameter] public EventCallback OnCloseSide { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task OnEdit()
    {
        await dialog.OpenAsync<ActivityForm>("Edit Activity",
            new Dictionary<string, object>()
            {
                { nameof(ActivityForm.Model), SelectedActivity },
                { nameof(ActivityForm.IsInsert), false },
                { nameof(ActivityForm.OnReloadList), EventCallback.Factory.Create(this, InvokeReloadList) },
                { nameof(ActivityForm.OnCloseSide), EventCallback.Factory.Create(this, OnCloseSide) }
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh" }
        );
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_GET,
                                                  new ActivityFilterDto() { activityId = SelectedActivity.id },
                                                  ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                SelectedActivity = JsonSerializer.Deserialize<ActivityDto>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnDelete()
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete activity", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_DELETE, 
                                                      new ActivityFilterDto() { activityId = SelectedActivity.id }, 
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await InvokeReloadList();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task InvokeReloadList()
    {
        await OnReloadList.InvokeAsync();
        await LoadData();
    }

    async Task OpenWorkOrderDetails(WorkOrderDto workOrder)
    {
        await dialog.OpenAsync<WorkOrderForm>("Edit workOrder",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderForm.Model), workOrder },
                { nameof(WorkOrderForm.IsInsert), false },
                { nameof(EmployeeForm.OnReloadList), EventCallback.Factory.Create(this, InvokeReloadList) }
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh" }
        );
    }

    private async Task OpenClientDetails(FirmClientDto client)
    {
        await dialog.OpenAsync<ClientForm>("Edit client",
            new Dictionary<string, object>()
            {
                { nameof(ClientForm.Model), client },
                { nameof(ClientForm.IsInsert), false },
                { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, InvokeReloadList) }
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh", }
        );
    }
}
