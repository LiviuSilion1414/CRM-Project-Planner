<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenStack>
        <RadzenRow>
            <RadzenFieldset Text="Client Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.workOrder.firmClient.name</RadzenText>
                    <RadzenText>Vat Number: @SelectedActivity.workOrder.firmClient.vatNumber</RadzenText>
                </RadzenColumn>
            </RadzenFieldset>
            <RadzenFieldset Text="Work Order Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.workOrder.name</RadzenText>
                    <RadzenText>Start Date: @SelectedActivity.workOrder.startDateString</RadzenText>
                    <RadzenText>End Date: @SelectedActivity.workOrder.endDateString</RadzenText>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
        <RadzenRow>
            <RadzenFieldset Text="Activity Information">
                <RadzenColumn>
                    <RadzenText>Name: @SelectedActivity.name</RadzenText>
                    <RadzenText>Start Date: @SelectedActivity.startDateString</RadzenText>
                    <RadzenText>End Date: @SelectedActivity.endDateString</RadzenText>
                </RadzenColumn>
            </RadzenFieldset>
        </RadzenRow>
    </RadzenStack>
    <RadzenStack AlignItems="AlignItems.End">
        <RadzenRow>
            <RadzenColumn>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Text="Delete" Click="OnDelete"></RadzenButton>
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Edit" Click="OnEdit"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenStack>

@code
{
    [Parameter] public ActivityDto SelectedActivity { get; set; }

    private async Task OnEdit()
    {
        await dialog.OpenAsync<ActivityEditForm>("Edit Activity",
            new Dictionary<string, object>()
            {
                { nameof(ActivityEditForm.Model), SelectedActivity }
            },
            new DialogOptions() { Width="40vw;" }
        );
    }

    private async Task OnDelete()
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete activity", new() { OkButtonText = "Delete" })).Value)
            {
                await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_DELETE, new FilterDto(), ApiType.Put);
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
