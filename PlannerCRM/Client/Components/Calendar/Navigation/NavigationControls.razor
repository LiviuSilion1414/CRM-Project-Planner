<div class="navigation-buttons">
    <button class="btn btn-outline-primary" @onclick="@(async () => await OnPreviousPeriodSet.InvokeAsync())">
        <i class="bi bi-chevron-left"></i>
    </button>
    <div>
        @foreach (var vt in Enum.GetValues(typeof(ViewType)))
        {
            <button 
            class="btn btn-outline-info @(GetViewClass((ViewType)vt)) mx-1" 
            type="button" @onclick="@(async () => await OnViewSet.InvokeAsync((ViewType)vt))">
                @vt
            </button>
        }
    </div>
    <button class="btn btn-outline-primary" @onclick="@(async () => await OnNextPeriodSet.InvokeAsync())">
        <i class="bi bi-chevron-right"></i>
    </button>
</div>
<span class="text-center">@GetCurrentDateInfoByCurrentView()</span>
<span class="rounded btn btn-outline-info pe-3" @onclick="@(async () => await OnGoToTodaySet.InvokeAsync())">Today</span>

<style>
    .navigation-buttons {
    display: flex;
    align-items: center;
    gap: 10px;
    }
</style>

@code {
    [Parameter] public DateTime CurrentDate { get; set; }
    [Parameter] public ViewType CurrentView { get; set; }
    [Parameter] public EventCallback<ViewType> OnViewSet { get; set; }
    [Parameter] public EventCallback OnPreviousPeriodSet { get; set; }
    [Parameter] public EventCallback OnNextPeriodSet { get; set; }
    [Parameter] public EventCallback OnGoToTodaySet { get; set; }

    private string GetViewClass(ViewType vt) => vt == CurrentView ? "active" : string.Empty;

    private string GetCurrentDateInfoByCurrentView()
    {
        if (CurrentView == ViewType.MonthView)
        {
            return GetCurrentDayOfMonthAndYear();
        }
        else if (CurrentView == ViewType.WeekView)
        {
            return GetCurrentDayOfMonthAndYear();
        }
        else if (CurrentView == ViewType.DayView)
        {
            return GetCurrentDayWeekMonthAndYear();
        }
        else
        {
            return GetCurrentYear();
        }
    }

    private string GetCurrentDayOfMonthAndYear()
        => $"{Enum.GetName(typeof(MonthNames), CurrentDate.Month - 1)} {CurrentDate.Year}";

    private string GetCurrentDayWeekMonthAndYear()
        => $"{CurrentDate.DayOfWeek} {CurrentDate.Day} {GetCurrentDayOfMonthAndYear()}";

    private string GetCurrentYear() => $"{CurrentDate.Year}";
}
