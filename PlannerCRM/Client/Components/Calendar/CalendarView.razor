@using System.Globalization

<div class="calendar-container">
    <div class="calendar-header">
        <div class="navigation-buttons">
            <button class="btn btn-outline-primary" @onclick="PreviousPeriod">
                <i class="bi bi-chevron-left"></i>
            </button>

            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @CurrentView
                </button>
                <select class="dropdown-menu" aria-labelledby="viewDropdown">
                    <option class="dropdown-item" @onclick="() => SetView(ViewType.Month)">Month</option>
                    <option class="dropdown-item" @onclick="() => SetView(ViewType.Week)">Week</option>
                    <option class="dropdown-item" @onclick="() => SetView(ViewType.Day)">Day</option>
                    <option class="dropdown-item" @onclick="() => SetView(ViewType.Year)">Year</option>
                </select>
            </div>
            <button class="btn btn-outline-primary" @onclick="NextPeriod">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
        <span class="text-center">@GetCurrentMonthAndYear()</span>
        <span class="rounded btn btn-outline-info pe-3" @onclick="GoToToday">Today</span>
    </div>

    <div class="calendar-main">
        @if (CurrentView == ViewType.Month)
        {
            <div class="calendar-grid">
                @foreach (var dayName in DayNames)
                {
                    <div class="calendar-day-name">@dayName</div>
                }
                @foreach (var day in CurrentMonthDays)
                {
                    <div class="calendar-day @GetDayClass(day)">
                        @if (day.HasValue)
                        {
                            <span>@day.Value</span>
                        }
                    </div>
                }
            </div>
        }
        else if (CurrentView == ViewType.Week)
        {
            <div class="calendar-week">
                @foreach (var day in CurrentWeekDays)
                {
                    <div class="calendar-week-day @GetDayClass(day.Day)">
                        <span>@day.DayOfWeek</span>
                        <span>@day.Day</span>
                    </div>
                }
            </div>
        }
        else if (CurrentView == ViewType.Day)
        {
            <div class="calendar-day-view">
                <h3>@CurrentDate.ToString("D", CultureInfo.InvariantCulture)</h3>
            </div>
        }
        else if (CurrentView == ViewType.Year)
        {
            <div class="calendar-year-grid">
                @for (int i = 1; i <= 12; i++)
                {
                    <div class="calendar-year-month">
                        <h5>@(new DateTime(CurrentDate.Year, i, 1).ToString("MMMM"))</h5>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .calendar-container {
    display: flex;
    flex-direction: column;
    height: 80vh;
    width: 80vw;
    background-color: #f9f9f9;
    font-family: Arial, sans-serif;
    }

    .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background-color: rgb(3, 155, 229);
    color: white;
    font-size: 18px;
    }

    .navigation-buttons {
    display: flex;
    align-items: center;
    gap: 10px;
    }

    .today-button {
    background-color: white;
    color: #4285f4;
    }

    .calendar-main {
    flex: 1;
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    }

    .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 10px;
    }

    .calendar-day-name {
    text-align: center;
    font-weight: bold;
    color: #888;
    }

    .calendar-day {
    text-align: center;
    padding: 30px;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;
    }

    .calendar-day:hover {
    background-color: #f4f4f4;
    color: #4285f4;
    }

    .today {
    background-color: #4285f4;
    color: white;
    font-weight: bold;
    }

    .calendar-week, .calendar-day-view, .calendar-year-grid {
    text-align: center;
    }
</style>

@code {
    private enum ViewType { Month, Week, Day, Year }
    private ViewType CurrentView { get; set; } = ViewType.Month;
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    private List<int?> CurrentMonthDays { get; set; } = new List<int?>();
    private List<DateTime> CurrentWeekDays { get; set; } = new List<DateTime>();
    private readonly string[] DayNames = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private readonly string[] MonthNames = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };

    protected override void OnInitialized()
    {
        GenerateCalendar();
    }

    private void GenerateCalendar()
    {
        CurrentMonthDays.Clear();

        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);

        int dayOfWeek = (int)firstDayOfMonth.DayOfWeek;
        for (int i = 0; i < dayOfWeek; i++)
        {
            CurrentMonthDays.Add(null);
        }

        for (int i = 1; i <= daysInMonth; i++)
        {
            CurrentMonthDays.Add(i);
        }

        GenerateWeekDays();
    }

    private void GenerateWeekDays()
    {
        CurrentWeekDays.Clear();
        var startOfWeek = CurrentDate.AddDays(-(int)CurrentDate.DayOfWeek);
        for (int i = 0; i < 7; i++)
        {
            CurrentWeekDays.Add(startOfWeek.AddDays(i));
        }
    }

    private void SetView(ViewType view)
    {
        CurrentView = view;
        GenerateCalendar();
    }

    private void GoToToday()
    {
        CurrentDate = DateTime.Today;
        GenerateCalendar();
    }

    private void PreviousPeriod()
    {
        if (CurrentView == ViewType.Month)
            CurrentDate = CurrentDate.AddMonths(-1);
        else if (CurrentView == ViewType.Week)
            CurrentDate = CurrentDate.AddDays(-7);
        else if (CurrentView == ViewType.Day)
            CurrentDate = CurrentDate.AddDays(-1);
        else if (CurrentView == ViewType.Year)
            CurrentDate = CurrentDate.AddYears(-1);

        GenerateCalendar();
    }

    private void NextPeriod()
    {
        if (CurrentView == ViewType.Month)
            CurrentDate = CurrentDate.AddMonths(1);
        else if (CurrentView == ViewType.Week)
            CurrentDate = CurrentDate.AddDays(7);
        else if (CurrentView == ViewType.Day)
            CurrentDate = CurrentDate.AddDays(1);
        else if (CurrentView == ViewType.Year)
            CurrentDate = CurrentDate.AddYears(1);

        GenerateCalendar();
    }

    private string GetDayClass(int? day)
    {
        if (!day.HasValue)
            return string.Empty;

        var currentDate = new DateTime(CurrentDate.Year, CurrentDate.Month, day.Value);
        return currentDate == DateTime.Today ? "today" : string.Empty;
    }

    private string GetCurrentMonthAndYear()
     => $"{MonthNames[CurrentDate.Month - 1]} {CurrentDate.Year}";
}
