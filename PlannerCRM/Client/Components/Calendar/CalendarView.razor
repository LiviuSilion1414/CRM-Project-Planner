@using System.Globalization

<div class="calendar-container">
    <div class="calendar-header">
        <div class="navigation-buttons">
            <button class="btn btn-outline-primary" @onclick="PreviousPeriod">
                <i class="bi bi-chevron-left"></i>
            </button>
            <div>
                @foreach (var vt in Enum.GetValues(typeof(ViewType)))
                {
                    <button class="btn btn-outline-info @(GetViewClass((ViewType)vt)) mx-1" type="button" @onclick="@(() => SetView((ViewType)vt))">@vt</button>
                }
            </div>
            <button class="btn btn-outline-primary" @onclick="NextPeriod">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
        <span class="text-center">@GetCurrentMonthAndYear()</span>
        <span class="rounded btn btn-outline-info pe-3" @onclick="GoToToday">Today</span>
    </div>

    <div class="calendar-main">
        @if (CurrentView == ViewType.Month)
        {
            <div class="calendar-grid">
                @foreach (var dayName in Enum.GetValues(typeof(DayNames)))
                {
                    <div class="calendar-day-name">@dayName</div>
                }
                @foreach (var day in CurrentMonthDays)
                {
                    <div class="calendar-day @GetDayClass(day)" style="position: relative;">
                        @if (day.HasValue)
                        {
                            foreach (var ev in _events)
                            {
                                @if (ev.StartDate.Day <= day && ev.EndDate.Day >= day)
                                {
                                    <div style="display: flex;">
                                        <br />
                                        <span style="position: relative; width: 100%; margin-bottom: 5px; color:white; background-color: @ev.Color;">@ev.Title</span>
                                    </div>
                                }
                            }
                            <span style="position: absolute; padding: 10px; top: 0; right: 0;">@day.Value</span>
                        }
                    </div>
                }
            </div>
        }
        else if (CurrentView == ViewType.Week)
        {
            <div class="calendar-week">
                @foreach (var day in CurrentWeekDays)
                {
                    <div class="calendar-week-day @GetDayClass(day.Day) mx-5 p-2" style="display: inline;">
                        <span>@day.DayOfWeek</span>
                        <span>@day.Day</span>
                    </div>
                }
            </div>
        }
        else if (CurrentView == ViewType.Day)
        {
            <div class="calendar-day-view">
                <h3>@CurrentDate.ToString("D", CultureInfo.InvariantCulture)</h3>
            </div>
        }
        else if (CurrentView == ViewType.Year)
        {
            <div class="calendar-year-grid">
                @for (int i = 1; i <= 12; i++)
                {
                    <div class="calendar-year-month mx-3 p-2" style="display: inline-block;">
                        <h5>@(new DateTime(CurrentDate.Year, i, 1).ToString("MMMM", CultureInfo.InvariantCulture))</h5>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .calendar-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        width: 80vw;
        background-color: #f9f9f9;
        font-family: Arial, sans-serif;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: rgb(3, 155, 229);
        color: white;
        font-size: 18px;
    }

    .navigation-buttons {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .today-button {
        background-color: white;
        color: #4285f4;
    }

    .calendar-main {
        flex: 1;
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
    }

    .calendar-day-name {
        text-align: center;
        font-weight: bold;
        color: #888;
    }

    .calendar-day {
        text-align: center;
        padding: 30px;
        max-width: 200px;
        background-color: white;
        border-radius: 5px;
        transition: background-color 0.3s, color 0.3s;
    }

        .calendar-day:hover {
            background-color: #f4f4f4;
            color: #4285f4;
        }

    .today {
        background-color: #4285f4;
        color: white;
        font-weight: bold;
    }

    .calendar-week, .calendar-day-view, .calendar-year-grid {
        text-align: center;
    }
</style>

@code {
    private enum MonthNames { January, February, March, April, May, June, July, August, September, October, November, December }
    private enum DayNames { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };
    private enum ViewType { Month, Week, Day, Year }
    public class CalendarEvent
    {
        public string Title { get; set; }
        public string Color { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }

    private ViewType CurrentView { get; set; } = ViewType.Month;
    private DateTime CurrentDate { get; set; } = DateTime.Today;

    private List<int?> CurrentMonthDays { get; set; } = new List<int?>();
    private List<DateTime> CurrentWeekDays { get; set; } = new List<DateTime>();

    private List<CalendarEvent> _events =
    [
        new() { Title = "Task 1", Color="orange", StartDate = DateTime.Now, EndDate=DateTime.Now.AddDays(2) },
    new() { Title = "Task 2", Color="purple", StartDate = DateTime.Now.AddDays(-1), EndDate=DateTime.Now },
    new() { Title = "Task 3", Color="blue", StartDate = DateTime.Now.AddDays(-7), EndDate=DateTime.Now.AddDays(-2) },
    new() { Title = "Task 4", Color="green", StartDate = DateTime.Now.AddDays(-10), EndDate=DateTime.Now.AddDays(-7) },
    new() { Title = "Task 5", Color="red", StartDate = DateTime.Now.AddDays(2), EndDate=DateTime.Now.AddDays(9) }

    ];

    protected override void OnInitialized()
    {
        GenerateCalendar();
    }


    private void GenerateCalendar()
    {
        CurrentMonthDays.Clear();

        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);

        // Set Monday as first day of the week
        int dayOfWeek = ((int)firstDayOfMonth.DayOfWeek + 6) % 7;

        for (int i = 0; i < dayOfWeek; i++)
        {
            CurrentMonthDays.Add(null);
        }

        for (int i = 1; i <= daysInMonth; i++)
        {
            CurrentMonthDays.Add(i);
        }

        GenerateWeekDays();
    }


    private void GenerateWeekDays()
    {
        CurrentWeekDays.Clear();

        // Set Monday as first day of the week
        var startOfWeek = CurrentDate.AddDays(-(((int)CurrentDate.DayOfWeek + 6) % 7));
        for (int i = 0; i < 7; i++)
        {
            CurrentWeekDays.Add(startOfWeek.AddDays(i));
        }
    }


    private void SetView(ViewType view)
    {
        CurrentView = view;
        GenerateCalendar();
    }

    private void GoToToday()
    {
        CurrentDate = DateTime.Today;
        GenerateCalendar();
    }

    private void PreviousPeriod()
    {
        if (CurrentView == ViewType.Month)
            CurrentDate = CurrentDate.AddMonths(-1);
        else if (CurrentView == ViewType.Week)
            CurrentDate = CurrentDate.AddDays(-7);
        else if (CurrentView == ViewType.Day)
            CurrentDate = CurrentDate.AddDays(-1);
        else if (CurrentView == ViewType.Year)
            CurrentDate = CurrentDate.AddYears(-1);

        GenerateCalendar();
    }

    private void NextPeriod()
    {
        if (CurrentView == ViewType.Month)
            CurrentDate = CurrentDate.AddMonths(1);
        else if (CurrentView == ViewType.Week)
            CurrentDate = CurrentDate.AddDays(7);
        else if (CurrentView == ViewType.Day)
            CurrentDate = CurrentDate.AddDays(1);
        else if (CurrentView == ViewType.Year)
            CurrentDate = CurrentDate.AddYears(1);

        GenerateCalendar();
    }

    private string GetDayClass(int? day)
    {
        if (!day.HasValue)
            return string.Empty;

        var currentDate = new DateTime(CurrentDate.Year, CurrentDate.Month, day.Value);
        return currentDate == DateTime.Today ? "today" : string.Empty;
    }

    private string GetViewClass(ViewType vt) => vt == CurrentView ? "active" : string.Empty;

    private string GetCurrentMonthAndYear()
        => $"{Enum.GetName(typeof(MonthNames), CurrentDate.Month - 1)} {CurrentDate.Year}";

}
