@typeparam TItem

<div class="pagination-controls">
    @for (var pageNumber = 1; pageNumber <= _totalPages; pageNumber++)
    {
        var currentPage = pageNumber;
        <button class="btn @(_currentPage == currentPage ? "btn-primary" : "btn-outline-primary") me-1" @onclick="@(() => GetPaginatedData((currentPage - OFFSET) * PageSize, currentPage))">
            @pageNumber
        </button>
    }
</div>

@code 
{
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<IEnumerable<TItem>> OnPagination { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;

    private const int OFFSET = 1;

    private int _currentPage = 1;
    private int _totalPages => (int)Math.Ceiling((double)Data.Count() / PageSize);

    private IEnumerable<TItem> _paginatedData = Enumerable.Empty<TItem>();
  
    private async Task GetPaginatedData(int offset, int pageNumber)
    {
        _currentPage = pageNumber;
        _paginatedData = Data
            .Skip(offset)
            .Take(PageSize)
            .ToList();

        await OnPagination.InvokeAsync(_paginatedData);
    }
}
