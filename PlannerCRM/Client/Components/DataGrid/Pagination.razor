@typeparam TItem

<div class="pagination-controls">
    <!-- Navigazione tra pagine -->
    <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@IsPreviousDisabled">Previous</button>

    @foreach (var pageNumber in Enumerable.Range(1, TotalPages))
    {
        <button class="btn @(CurrentPage == pageNumber ? "btn-primary" : "btn-outline-primary") me-1"
                @onclick="() => GoToPage(pageNumber)">
            @pageNumber
        </button>
    }

    <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@IsNextDisabled">Next</button>
</div>

@code {
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<IEnumerable<TItem>> OnPagination { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;

    private int CurrentPage { get; set; } = 1;
    private int TotalPages => (int)Math.Ceiling((double)Data.Count() / PageSize);

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage == TotalPages;

    protected override void OnParametersSet()
    {
        // Inizializza i dati paginati
        Paginate();
    }

    private void Paginate()
    {
        var paginatedData = Data.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
        OnPagination.InvokeAsync(paginatedData);
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            Paginate();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            Paginate();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            Paginate();
        }
    }
}
