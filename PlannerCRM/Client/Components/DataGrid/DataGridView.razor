@typeparam TItem where TItem : class, new()

<table class="table table-striped">
    <thead>
        <tr>
            @foreach (var prop in Properties)
            {
                <th>@prop</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in _paginatedData)
        {
            <tr @onclick="@(() => OnSelectedItem(item))" style="cursor: pointer;">
                @foreach (var prop in Properties)
                {
                    <td>@GetItemValue(item, prop)</td>
                }
                <td colspan="2">
                    <i class="bi bi-pencil-square" @onclick="@(() => OnEditSelected(item))"></i>
                    <i class="bi bi-trash3" @onclick="@(() => OnDeleteSelected(item))"></i>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-center">
                @for (var pageNumber = 1; pageNumber <= _totalPages; pageNumber++)
                {
                    var currentPage = pageNumber;
                    <button class="btn btn-outline-primary me-1" @onclick="@(() => GetPaginatedData((currentPage - 1) * _pageSize))">
                        @pageNumber
                    </button>
                }
            </td>
        </tr>
    </tfoot>
</table>

@code {
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public EventCallback<TItem> RowEdit { get; set; }
    [Parameter] public EventCallback<TItem> RowDelete { get; set; }

    private IEnumerable<TItem> _paginatedData = Enumerable.Empty<TItem>();

    public int _pageSize = 10;
    private int _totalPages => (int)Math.Ceiling((double)Data.Count() / _pageSize);

    protected override void OnParametersSet()
    {
        if (Data != null && Data.Any())
        {
            GetPaginatedData(offset: 0);
        }
    }

    private async Task OnSelectedItem(TItem item) => await RowSelect.InvokeAsync(item);

    private async Task OnEditSelected(TItem item) => await RowEdit.InvokeAsync(item);

    private async Task OnDeleteSelected(TItem item) => await RowDelete.InvokeAsync(item);

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);

    private void GetPaginatedData(int offset) 
    {
        _paginatedData = Data
            .Skip(offset)
            .Take(_pageSize)
            .ToList();

        Console.WriteLine($"Is Empty: {!_paginatedData.Any()}");
        foreach (var i in _paginatedData)
        {
            Console.WriteLine(GetItemValue(i, "Name"));
        }
    }
    
}
