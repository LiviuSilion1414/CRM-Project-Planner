@typeparam TItem where TItem : class, new()

@if (Data is null)
{
    <p>No data available.</p>
}
else
{
    <table class="table table-hover text-center">
        <thead>
            <tr>
                @foreach (var prop in Properties)
                {
                    <th>@prop</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _paginatedData)
            {
                <tr class="@(item.Equals(_selectedItem) ? "table-active" : string.Empty)" @onclick="@(() => OnSelectedItem(item))">
                    @foreach (var prop in Properties)
                    {
                        <td>@GetItemValue(item, prop)</td>
                    }
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="2" class="text-center">
                    <Pagination TItem="@TItem" Data="@Data" OnPagination="@GetPaginatedData" />
                </td>
            </tr>
        </tfoot>
    </table>
}

@code {
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public EventCallback<TItem> RowEdit { get; set; }
    [Parameter] public EventCallback<TItem> RowDelete { get; set; }

    private IEnumerable<TItem> _paginatedData = Enumerable.Empty<TItem>();

    private TItem _selectedItem = null;
    private int _pageSize = 10;
    private int _totalPages => (int)Math.Ceiling((double)Data.Count() / _pageSize);

    protected override void OnParametersSet()
    {
        if (Data != null && Data.Any())
        {
            GetPaginatedData(Data.Take(10).ToList());
        }
    }

    private async Task OnSelectedItem(TItem item)
    {
        if (_selectedItem is not null) 
        {
            _selectedItem = null;
        }
        else
        {
            _selectedItem = item;
        }

        await RowSelect.InvokeAsync(item);
    }

    private async Task OnEditSelected(TItem item) => await RowEdit.InvokeAsync(item);

    private async Task OnDeleteSelected(TItem item) => await RowDelete.InvokeAsync(item);

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);

    private void GetPaginatedData(IEnumerable<TItem> items) => _paginatedData = items;
}
