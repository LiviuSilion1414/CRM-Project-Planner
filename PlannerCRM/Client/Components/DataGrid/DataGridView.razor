@typeparam TItem where TItem : class, new()

<table class="table table-striped">
    <thead>
        <tr>
            @foreach (var prop in Properties)
            {
                <th>@prop</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Data)
        {
            <tr @onclick="@(() => OnSelectedItem(item))" style="cursor: pointer;">
                @foreach (var prop in Properties)
                {
                    <td>@GetItemValue(item, prop)</td>
                }
                <td colspan="2">
                    <i class="bi bi-pencil-square" @onclick="@(() => OnEditSelected(item))"></i>
                    <i class="bi bi-trash3" @onclick="@(() => OnDeleteSelected(item))"></i>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public EventCallback<TItem> RowEdit { get; set; }
    [Parameter] public EventCallback<TItem> RowDelete { get; set; }


    private async Task OnSelectedItem(TItem item) => await RowSelect.InvokeAsync(item);

    private async Task OnEditSelected(TItem item) => await RowEdit.InvokeAsync(item);

    private async Task OnDeleteSelected(TItem item) => await RowDelete.InvokeAsync(item);

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);
}
