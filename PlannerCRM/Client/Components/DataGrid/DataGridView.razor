@typeparam TItem where TItem : class, new()

<style>
    .master-detail-container {
        margin-top: 20px;
        display: flex;
    }

    .actions {
        width: 100px;
        display: flex;
        flex-direction: column;
        margin-right: 20px;
    }

    .action {
        width: max-content;
        height: max-content;
        padding-bottom: 5px;
    }

    .master, .detail {
        display: inline-block;
        width: 50vw;
    }

    .detail {
        padding-left: 50px;
    }

    .over {
        position: fixed;
    }

    .table-row-hover:hover {
        transform: scale(1.1);
        font-weight: bold;
        transition: transform 0.3s ease, font-weight 0.3s ease;
    }

    .table-row-selected {
        background-color: #f0f0f0;
        font-weight: bold;
    }

</style>

@if (Data is null)
{
    <p>No data available.</p>
}
else
{
    <div class="master-detail-container">
        <div class="actions">
            <div class="action">
                <button class="action btn btn-outline-primary" @onclick="ToggleAddItem">
                    <i class="bi bi-plus"></i>
                    Add
                </button>
            </div>

            @if (_selectedItems.Count() == 1)
            {
                <div class="action">
                    <button class="action btn btn-outline-info" @onclick="ToggleEditItem">
                        <i class="bi bi-pencil"></i>
                        Edit
                    </button>
                </div>
                <div class="action">
                    <button class="action btn btn-outline-danger" @onclick="ToggleDeleteItem">
                        <i class="bi bi-trash3"></i>
                        Delete
                    </button>
                </div>
            }
            <div class="action">
                @if (_selectedItems.Any())
                {
                    <button class="action btn btn-outline-secondary" @onclick="DeselectAll">
                        <i class="bi bi-x-circle"></i>
                        Deselect
                    </button>
                }
                else
                {
                    <button class="action btn btn-outline-secondary" @onclick="SelectAll">
                        <i class="bi bi-x-circle"></i>
                        Select
                    </button>
                }
            </div>
        </div>
        <div class="master">
            <table class="table text-center">
                <thead>
                    <tr>
                        @foreach (var prop in Properties)
                        {
                            <th>@prop</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _paginatedData)
                    {
                        <tr class="@(_selectedItems.Contains(item) ? "table-active table-row-selected" : string.Empty) table-row-hover" @onclick="@(() => OnSelectMultipleItems(item))">
                            @foreach (var prop in Properties)
                            {
                                <td>
                                    @if (Properties.First() == prop && _selectedItems.Contains(item))
                                    {
                                        <i class="bi bi-check2-square float-start"></i>
                                    }
                                    @GetItemValue(item, prop)
                                </td>
                            }
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2" class="text-center">
                            <Pagination TItem="@TItem" Data="@Data" OnPagination="@GetPaginatedData" />
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
}

@code 
{
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    [Parameter] public EventCallback<List<TItem>> RowsSelected { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public EventCallback RowAdd { get; set; }
    [Parameter] public EventCallback<TItem> RowEdit { get; set; }
    [Parameter] public EventCallback<TItem> RowDelete { get; set; }

    private IEnumerable<TItem> _paginatedData = [];
    private int _totalPages => (int)Math.Ceiling((double)Data.Count() / _pageSize);
    private int _pageSize = 10;

    private List<TItem> _selectedItems = [];

    private bool _isAddItemSelected = false;
    private bool _isEditItemSelected = false;
    private bool _isDeleteItemSelected = false;

    protected override void OnParametersSet()
    {
        if (Data != null && Data.Any())
        {
            GetPaginatedData(Data.Take(10).ToList());
        }
    }

    private async Task OnSelectMultipleItems(TItem item)
    {
        if (_selectedItems.Contains(item))
        {
            _selectedItems.Remove(item);
        }
        else
        {
            _selectedItems.Add(item);
        }

        if (_selectedItems.Count() == 1)
        {
            await RowSelect.InvokeAsync(_selectedItems.Single());
        }
        else
        {
            await RowsSelected.InvokeAsync(_selectedItems);
        }
    }

    private void DeselectAll() => _selectedItems.Clear();

    private void SelectAll() => _selectedItems = Data.ToList();

    private async Task ToggleAddItem()
    {    
        _isAddItemSelected = !_isAddItemSelected;
        await RowAdd.InvokeAsync();
    }

    private async Task ToggleEditItem()
    {
        _isEditItemSelected = !_isEditItemSelected;
        await RowEdit.InvokeAsync(_selectedItems.Single());
    }

    private async Task ToggleDeleteItem()
    {
        _isDeleteItemSelected = !_isDeleteItemSelected;
        await RowDelete.InvokeAsync(_selectedItems.Single());
    }

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);

    private void GetPaginatedData(IEnumerable<TItem> items) => _paginatedData = items;
}
