@typeparam TItem where TItem : class, new()
@typeparam TTemp where TTemp : class, new()

<style>
    .master-detail-container {
        margin-top: 20px;
        display: flex;
    }

    .actions {
        width: 100px;
        display: flex;
        flex-direction: column;
        margin-right: 20px;
    }

    .action {
        width: max-content;
        height: max-content;
        padding-bottom: 5px;
    }

    .master, .detail {
        display: inline-block;
        width: 50vw;
    }

    .detail {
        padding-left: 50px;
    }

    .over {
        position: fixed;
    }

    .table-row-hover:hover {
        transform: scale(1.1);
        font-weight: bold;
        transition: transform 0.3s ease, font-weight 0.3s ease;
    }

    .table-row-selected {
        background-color: #f0f0f0;
        font-weight: bold;
    }

</style>

<div class="master-detail-container">
    <div class="actions">
        <div class="action">
            <button class="action btn btn-outline-primary" @onclick="ToggleAddItem">
                <i class="bi bi-plus"></i>
                Add
            </button>
        </div>

        @if (_selectedItems.Count() == 1)
        {
            <div class="action">
                <button class="action btn btn-outline-info" @onclick="ToggleEditItem">
                    <i class="bi bi-pencil"></i>
                    Edit
                </button>
            </div>
            <div class="action">
                <button class="action btn btn-outline-danger" @onclick="ToggleDeleteItem">
                    <i class="bi bi-trash3"></i>
                    Delete
                </button>
            </div>
        }
        @if (_selectedItems.Count() > 1)
        {
            <div class="action">
                <div class="action">
                    <button class="action btn btn-outline-danger" @onclick="ToggleDeleteAllItems">
                        <i class="bi bi-x-circle"></i>
                        Delete all
                    </button>
                </div>
            </div>
        }

        @if (_selectedItems.Count() > 1 || _selectedItems.Count() == 1)
        {
            <div class="action">
                <button class="action btn btn-outline-secondary" @onclick="DeselectAll">
                    <i class="bi bi-x-circle"></i>
                    Deselect
                </button>
            </div>
        }

        @if (_selectedItems.Any())
        {
            <div class="action">
                <button class="action btn btn-outline-secondary" @onclick="SelectAll">
                    <i class="bi bi-x-circle"></i>
                    Select
                </button>
            </div>

        }
    </div>
    <div class="master">
        <table class="table text-center">
            <thead>
                <tr>
                    @foreach (var prop in DataContainer.DataManager.SelectedProperties)
                    {
                        <th>@prop</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (_paginatedData is null || !_paginatedData.Any())
                {
                    <tr>
                        <td colspan="2">No data available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in _paginatedData)
                    {
                        <tr class="@(_selectedItems.Contains(item) ? "table-active table-row-selected" : string.Empty) table-row-hover" 
                        @onclick="@(() => OnSelectMultipleItems(item))">
                            @foreach (var prop in DataContainer.DataManager.SelectedProperties)
                            {
                                <td>
                                    @if (DataContainer.DataManager.SelectedProperties.First() == prop && _selectedItems.Contains(item))
                                    {
                                        <i class="bi bi-check2-square float-start"></i>
                                    }
                                    @GetItemValue(item, prop)
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr class ="text-center">
                    <td colspan="3">
                        <Pagination TItem="@TItem" Data="@DataContainer.DataManager.MainItems" OnPagination="@GetPaginatedData" />
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

@code
{
    [CascadingParameter] public CascadingDataContainer<TItem, TTemp> DataContainer { get; set; }
    [Parameter] public EventCallback<bool> ShouldFetchNewData { get; set; }
    [Parameter] public EventCallback<CascadingDataContainer<TItem, TTemp>> GetCascadingContainerStates { get; set; }

    private List<TItem> _selectedItems = [];
    private IEnumerable<TItem> _paginatedData = [];
    private int _totalPages => (int)Math.Ceiling((double)DataContainer.DataManager.MainItems.Count() / _pageSize);
    private int _pageSize = 10;


    protected override void OnParametersSet()
    {
        if (DataContainer.DataManager.MainItems is not null)
        {
            GetPaginatedData(DataContainer.DataManager.MainItems.Take(10).ToList());
        }
    }

    public async Task Reload()
    {
        StateHasChanged();
        await ShouldFetchNewData.InvokeAsync(true);
    }

    private async Task OnSelectMultipleItems(TItem item)
    {
        if (_selectedItems.Contains(item))
        {
            _selectedItems.Remove(item);
        }
        else
        {
            _selectedItems.Add(item);
        }

        if (_selectedItems.Count() == 1)
        {
            await ToggleSelectItem();
        }
        else
        {
            await ToggleSelectedItems();
        }
    }

    private void DeselectAll() => _selectedItems.Clear();

    private void SelectAll() => _selectedItems = DataContainer.DataManager.MainItems.ToList();

    private async Task ToggleSelectItem()
    {
        DataContainer.ActionStateManager.SetAction(ActionType.View);
        DataContainer.DataManager.SelectedItem = _selectedItems.Single();

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private async Task ToggleSelectedItems()
    {
        DataContainer.DataManager.SelectedItems = _selectedItems.ToList();

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private async Task ToggleAddItem()
    {
        DataContainer.ActionStateManager.SetAction(ActionType.Add);
        DataContainer.DataManager.NewItem = new();

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private async Task ToggleEditItem()
    {
        DataContainer.ActionStateManager.SetAction(ActionType.Update);
        DataContainer.DataManager.SelectedItem = _selectedItems.Single();

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private async Task ToggleDeleteItem()
    {
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteSingle);
        DataContainer.DataManager.SelectedItem = _selectedItems.Single();

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private async Task ToggleDeleteAllItems()
    {
        DataContainer.ActionStateManager.SetAction(ActionType.DeleteMultiple);
        DataContainer.DataManager.SelectedItems = _selectedItems;

        await GetCascadingContainerStates.InvokeAsync(DataContainer);
        DataContainer.ActionStateManager.ResetFlags();
    }

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);

    private void GetPaginatedData(IEnumerable<TItem> items) => _paginatedData = items;
}
