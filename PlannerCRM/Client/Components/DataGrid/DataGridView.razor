@typeparam TItem where TItem : class, new()

<style>
    .master-detail-container {
        margin-top: 20px;
        display: flex;
    }
    .master, .detail {
        display: inline-block;
        width: 50vw;
    }

    .detail {
        padding-left: 50px;
    }

    .over {
        position: fixed;
    }

    .table-row-hover:hover {
        transform: scale(1.1);
        font-weight: bold;
        transition: transform 0.3s ease, font-weight 0.3s ease;
    }

    .table-row-selected {
        background-color: #f0f0f0;
        font-weight: bold;
    }

</style>

<div class="master-detail-container">
    <ItemActions TItem="@TItem" @ref="@_action" DataContainer="@DataContainer" OnChosenAction="@GetChosenAction"/>
    <div class="master">
        <table class="table text-center">
            <thead>
                <tr>
                    @foreach (var prop in DataContainer.DataManager.SelectedProperties)
                    {
                        <th>@prop</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (_paginatedData is null || !_paginatedData.Any())
                {
                    <tr>
                        <td colspan="2">No data available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in _paginatedData)
                    {
                        <tr class="@GetSelectedItemStyle(item) table-row-hover" @onclick="@(() => _action.OnSelectMultipleItems(item))">
                            @foreach (var propertyName in DataContainer.DataManager.SelectedProperties)
                            {
                                <td>
                                    @if (CanAddCheckMarkForSelectedItem(item, propertyName))
                                    {
                                        <i class="bi bi-check2-square float-start"></i>
                                    }
                                    @GetItemValue(item, propertyName)
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr class ="text-center">
                    <td colspan="3">
                        <Paginator TItem="@TItem" Data="@DataContainer.DataManager.MainItems" OnPagination="@GetPaginatedData" />
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

@code
{
    [CascadingParameter] public CascadingDataContainer<TItem> DataContainer { get; set; }
    [Parameter] public EventCallback<CascadingDataContainer<TItem>> GetCascadingContainerStates { get; set; }

    private IEnumerable<TItem> _paginatedData = [];
    private ItemActions<TItem> _action = new();

    protected override void OnParametersSet()
    {
        if (DataContainer.DataManager.MainItems is not null)
        {
            GetPaginatedData(DataContainer.DataManager.MainItems.Take(10).ToList());
        }
    }

    private async Task GetChosenAction(CascadingDataContainer<TItem> dataContainer)
    {
        DataContainer = dataContainer;
        await GetCascadingContainerStates.InvokeAsync(dataContainer);
    }

    private string GetSelectedItemStyle(TItem item)
         => DataContainer.DataManager.SelectedItems.Contains(item) ? "table-active table-row-selected" : string.Empty;

    private bool CanAddCheckMarkForSelectedItem(TItem item, string propertyName)
        => DataContainer.DataManager.SelectedProperties.First() == propertyName && DataContainer.DataManager.SelectedItems.Contains(item);

    private object GetItemValue(TItem item, string propertyName) =>
        item.GetType()
            .GetProperty(propertyName)?
            .GetValue(item);

    private void GetPaginatedData(IEnumerable<TItem> items) => _paginatedData = items;
}
