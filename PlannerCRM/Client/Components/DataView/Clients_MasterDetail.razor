@if (Clients == null)
{
    <Loader></Loader>
}
else
{
    <RadzenCard class="mb-3">
        <RadzenRow JustifyContent="JustifyContent.Stretch">
            <RadzenColumn>
                <RadzenFormField Text="Client" AllowFloatingLabel="false">
                    <RadzenTextBox class="form-control" Style="min-width: 30vw;"
                    @bind-Value="@query" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton Icon="search_off" ButtonStyle="ButtonStyle.Info" Variant="Variant.Filled" Text="Reset" Click="@ResetFilters"></RadzenButton>
                <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Text="Search" Click="@LoadData"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenCard class="mb-3">
        <RadzenRow JustifyContent="JustifyContent.End">
            <RadzenColumn SizeLG="12">
                <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Text="Add" Click="@AddClient"></RadzenButton>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenRow Gap="1rem">
        <RadzenColumn SizeLG="4" SizeMD="6">
            <RadzenListBox TValue="Guid"
            Data="@Clients"
            AllowClear="true"
            AllowFiltering="true"
            AllowSelectAll="true"
            ValueChanged="OnClientChanged"
            TextProperty="@nameof(FirmClientDto.name)"
            ValueProperty="@nameof(FirmClientDto.id)"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            TabIndex="-1"
            class="w-100">
            </RadzenListBox>
        </RadzenColumn>

        <RadzenColumn SizeLG="8" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                <RadzenStack Gap="1rem">
                    @if (Clients == null || !Clients.Any())
                    {
                        <p>Select a client from the list</p>
                    }
                    else
                    {
                        <RadzenCard Variant="Variant.Text" class="rz-background-color-primary-lighter rz-color-on-primary-lighter">
                            Client: <b>@clientDto.name</b>
                        </RadzenCard>

                        <RadzenTabs SelectedIndex="0">
                            <Tabs>
                                <RadzenTabsItem Text="General Details">
                                    <RadzenRow>
                                        <RadzenColumn>
                                            Name: @clientDto.name
                                        </RadzenColumn>
                                        <RadzenColumn>
                                            Vat Number: @clientDto.vatNumber
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow class="mt-5">
                                        <RadzenColumn SizeLG="6">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Text="Edit" Click="EditClient"></RadzenButton>
                                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Secondary" Text="Delete" Click="DeleteClient"></RadzenButton>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Related WorkOrders">
                                    <RadzenDataGrid TItem="@WorkOrderDto"
                                    Data="@clientDto.workOrders"
                                    AllowRowSelectOnRowClick="true"
                                    RowSelect="OnWorkOrderChanged"
                                    AllowFiltering="true"
                                    AllowPaging="true"
                                    AllowSorting="true">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="@WorkOrderDto" Filterable="false" Sortable="false" Property="@nameof(WorkOrderDto.name)" Title="Name" />
                                            <RadzenDataGridColumn TItem="@WorkOrderDto" Filterable="false" Sortable="false" Property="@nameof(WorkOrderDto.startDateString)" Title="Start Date" />
                                            <RadzenDataGridColumn TItem="@WorkOrderDto" Filterable="false" Sortable="false" Property="@nameof(WorkOrderDto.endDateString)" Title="EndDate" />

                                            <RadzenDataGridColumn TItem="@WorkOrderDto" Filterable="false" Sortable="false" Width="64px">
                                                <Template Context="detail">
                                                    <RadzenButton Icon="open_in_new" IconColor="@Colors.Primary" Variant="Variant.Text" Click="@(() => WorkOrderOverview(detail))"></RadzenButton>
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </RadzenTabsItem>
                                    @if (workOrderDto != null && workOrderDto.firmClientId == clientDto.id)
                                    {
                                        <RadzenTabsItem Text="Activities">
                                                <RadzenDataList TItem="ActivityDto" WrapItems="true" AllowPaging="true" Data="@(workOrderDto.activities)" PageSize="10">
                                                    <Template Context="detail">
                                                        <RadzenCard Variant="Variant.Outlined" Style="width:100px; height:100px">
                                                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="Activity" class="rz-mb-1" />
                                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.P">@detail.name</RadzenText>
                                                        </RadzenCard>
                                                    </Template>
                                                </RadzenDataList>
                                        </RadzenTabsItem>
                                    }
                            </Tabs>
                        </RadzenTabs>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
}

@code {
    [Parameter] public List<FirmClientDto> Clients { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public EventCallback<FirmClientDto> OnAddClient { get; set; }
    [Parameter] public EventCallback<FirmClientDto> OnEditClient { get; set; }
    [Parameter] public EventCallback<FirmClientDto> OnDeleteClient { get; set; }
    [Parameter] public EventCallback<WorkOrderDto> OnWorkOrderOverview { get; set; }

    WorkOrderDto workOrderDto = new WorkOrderDto();
    FirmClientDto clientDto = new FirmClientDto();

    string query = string.Empty;

    protected override void OnInitialized()
    {
        if (Clients != null && Clients.Any())
        {
            clientDto = Clients.FirstOrDefault();
        }
    }

    async Task ResetFilters()
    {
        await OnReset.InvokeAsync();
    }

    async Task LoadData()
    {
        await OnSearch.InvokeAsync(query);
    }

    async Task AddClient()
    {
        await OnAddClient.InvokeAsync();
    }

    async Task EditClient()
    {
        await OnEditClient.InvokeAsync(clientDto);
    }

    async Task DeleteClient()
    {
        await OnDeleteClient.InvokeAsync(clientDto);
    }

    void OnWorkOrderChanged(WorkOrderDto workOrder)
    {
        workOrderDto = workOrder;
    }

    async Task WorkOrderOverview(WorkOrderDto workOrder)
    {
        workOrderDto = workOrder;
        workOrder.firmClient = clientDto;
        await OnWorkOrderOverview.InvokeAsync(workOrder);
    }

    void OnClientChanged(Guid clientId)
    {
        clientDto = Clients.SingleOrDefault(x => x.id == clientId);
    }
}
