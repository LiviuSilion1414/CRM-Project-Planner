@using System.Text.Json
@using System.Reflection
@typeparam TItem where TItem : class, new()

<RadzenStack class="rz-p-0 rz-p-md-12">
    <RadzenTemplateForm TItem="TItem" Data="@Model" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
        <RadzenFieldset Text="Personal Information">
            <RadzenStack Gap="2rem" class="rz-p-4 rz-p-md-12">
                @foreach (var propertyName in Properties)
                {
                    var property = typeof(TItem).GetProperty(propertyName);
                    if (property != null)
                    {
                        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                            <RadzenColumn Size="12" SizeMD="6" class="rz-text-align-start rz-text-align-md-end">
                                <RadzenLabel Text="@propertyName" Component="@propertyName" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Name="@propertyName"
                                Value="@(GetPropertyValue(Model, propertyName)?.ToString())"
                                Change="@(args => SetPropertyValue(Model, propertyName, args))"
                                Style="display: block; width: 100%;" />

                            <RadzenRequiredValidator Component="@propertyName"
                                                    Text="@($"{propertyName}: err")"
                                                    Popup="@Popup"
                                                    Style="position: absolute" />
                            </RadzenColumn>
                        </RadzenRow>
                    }
                }
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mt-4">
                    <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenTemplateForm>
</RadzenStack>

@code {
    [Parameter] public TItem Model { get; set; } = new TItem();
    [Parameter] public IEnumerable<string> Properties { get; set; }
    [Parameter] public EventCallback<TItem> OnSubmitCallback { get; set; }

    bool Popup;

    void OnSubmit(TItem model)
    {
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions { WriteIndented = true })}");
        OnSubmitCallback.InvokeAsync(model);
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions { WriteIndented = true })}");
    }

    object GetPropertyValue(object model, string propertyName)
    {
        return model?.GetType().GetProperty(propertyName)?.GetValue(model);
    }

    void SetPropertyValue(object model, string propertyName, object value)
    {
        var property = model?.GetType().GetProperty(propertyName);
        if (property != null && value != null)
        {
            var convertedValue = Convert.ChangeType(value, property.PropertyType);
            property.SetValue(model, convertedValue);
        }
    }
}
