@inherits LayoutComponentBase

@using PlannerCRM.Shared.Models
@using PlannerCRM.Shared.DTOs.EmployeeDto.Views

@inject NavigationManager navManager
@inject CustomAuthState authStateProvider

<div class="page">
    <main>
        <div class="navbar">
            <a class="nav-link" @onclick="NavigateBasedOnRole">
                PlannerCRM
            </a>
            <AuthorizeView>
                <Authorized>
                    <div class="parent">
                        <div class="child">
                            <span class="user-info">Ciao, @context.User.Identity.Name!</span> <br>
                            <span class="user-info">Ruolo: @UserRole</span>
                        </div>
                        <div class="child">
                            <button type="button" class="btn btn-danger" @onclick="LogoutClick">
                                <span class="oi oi-account-logout"></span>
                                Disconettiti
                            </button>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="wrapper">
                        <span>Accedi al tuo account!</span>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool IsAuthenticated { get; set; }
    private string UserRole { get; set; }
    private CurrentEmployee CurrentEmployee { get; set; }
    private CurrentUser CurrentUser { get; set; }
    private const string SPECIAL_EMAIL = "account.manager@gmail.com";


    protected override async Task OnInitializedAsync() {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        
        if (IsAuthenticated) {
            UserRole = (await authStateProvider.GetRole())
                .ToUpper()
                .Replace('_', ' ');
        }
    }

    async Task NavigateBasedOnRole() {
        if (IsAuthenticated) {
            var role = await authStateProvider.GetRole();
            CurrentUser = await authStateProvider.GetCurrentUserInfoAsync();

            if (CurrentUser.UserName != SPECIAL_EMAIL) {
                CurrentEmployee = await authStateProvider.GetCurrentEmployeeId(CurrentUser.UserName);
            }

            foreach (var possibleRole in Enum.GetValues(typeof(Roles))) {
                if (possibleRole.ToString() == role) {
                    if (possibleRole.ToString() == nameof(Roles.SENIOR_DEVELOPER) ||
                        possibleRole.ToString() == nameof(Roles.JUNIOR_DEVELOPER)) {
                        navManager.NavigateTo($"{role.ToLower().Replace('_', '-')}/{CurrentEmployee.Id}", true);
                    } else {
                        navManager.NavigateTo($"{role.ToLower().Replace('_', '-')}", true);
                    }
                }
            }
        } else {
            navManager.NavigateTo("/", true);
        }
    }

    async Task LogoutClick() {
        await authStateProvider.Logout();
        navManager.NavigateTo("/login");
    }
}



