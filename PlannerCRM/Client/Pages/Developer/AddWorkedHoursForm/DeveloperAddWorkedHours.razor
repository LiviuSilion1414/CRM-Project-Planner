@page "/developer/add/worked-hours/{EmployeeId:int}/{ActivityId:int}"

@using PlannerCRM.Shared.DTOs.ActivityDto.Views
@using PlannerCRM.Shared.DTOs.Workorder.Views
@using PlannerCRM.Shared.DTOs.WorkTimeDto.Form
@using PlannerCRM.Shared.Models

@inject HttpClient httpClient
@inject NavigationManager navManager

<PageTitle>Developer - Add worked hours</PageTitle>

<div class="container-fluid">
    <h3>Aggiungi orario di lavoro</h3>
    <EditForm Model="@_model" OnValidSubmit="OnClickAddWorkedHours">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <span class="oi oi-briefcase"></span>
            <label for="Nome commessa:">Nome commessa </label> <span>(@_workorder.StartDate.ToShortDateString() - @_workorder.FinishDate.ToShortDateString())</span>
            <input type="text" class="form-control" @bind="_workorder.Name" readonly/>
        </div>
        <div class="form-group">
            <span class="oi oi-puzzle-piece"></span>
            <label for="Nome attività">Nome attività </label>
            <input type="text" class="form-control" @bind="_model.Name" readonly/>
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data d'inizio">Data d'inizio </label>
            <input type="date" class="form-control" @bind="@_model.StartDate" readonly/>
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data di fine">Data fine </label>
            <input type="date" class="form-control" @bind="@_model.FinishDate" readonly/>
        </div>
        <div class="form-group">
            <span class="oi oi-clock"></span>
           <label for="Orario di lavoro">Inserisci il tuo orario di lavoro</label>
           <input type="number" class="form-control" @bind="@WorkedHours" required>
        </div>
        <div class="wrapper-btn">
            <div class="btn-cancel">
                <button type="button" class="btn btn-link" @onclick="OnClickCancel">Annulla</button>
            </div>
            <div class="btn-confirm">
                <button type="submit" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int EmployeeId { get; set; }
    [Parameter] public int ActivityId { get; set; }
    [Parameter] public int WorkorderId { get; set; }
    private string Role { get; set; }  
    private int WorkedHours { get; set; }
    private WorkTimeRecordFormDTO _workTimeRecord = new();
    private ActivityViewDTO _model = new();
    private WorkorderViewDTO _workorder = new();
    private string _role { get; set; }

    protected override async Task OnInitializedAsync() {
        var responseMessage = await httpClient.GetAsync("http://localhost:5032/account/user/role");
        var _role = await responseMessage.Content.ReadAsStringAsync();
        foreach (var possibleRole in Enum.GetValues(typeof(Roles))) {
            if ((possibleRole.ToString() == nameof(Roles.SENIOR_DEVELOPER) && possibleRole.ToString() == _role) || 
                (possibleRole.ToString() == nameof(Roles.JUNIOR_DEVELOPER) && possibleRole.ToString() == _role)) {
                Role = _role;
            }
        }
            
        _model = await httpClient.GetFromJsonAsync<ActivityViewDTO>($"http://localhost:5032/activity/get/{ActivityId}");
        _workorder = await httpClient.GetFromJsonAsync<WorkorderViewDTO>($"http://localhost:5032/workorder/get/for/view/{_model.WorkOrderId}");
    }

    public void RedirectToPage() {
        foreach (var possibleRole in Enum.GetValues(typeof(Roles))) {
            if (((possibleRole.ToString() == _role) && (possibleRole.ToString() == Role)) && ((possibleRole.ToString() == nameof(Roles.SENIOR_DEVELOPER)))) {
                navManager.NavigateTo($"/senior-developer/{EmployeeId}");
            }
            if (((possibleRole.ToString() == _role) && (possibleRole.ToString() == Role)) && ((possibleRole.ToString() == nameof(Roles.JUNIOR_DEVELOPER)))) {
                navManager.NavigateTo($"/senior-developer/{EmployeeId}");
            }
        }
    }
    
    public void OnClickCancel() {
        RedirectToPage();
    }

    public async Task OnClickAddWorkedHours() {
        await Task.Run(() => {
            _workTimeRecord.Date = DateTime.Now;
            _workTimeRecord.Hours = WorkedHours;
            _workTimeRecord.ActivityId = _model.Id;
            _workTimeRecord.EmployeeId = EmployeeId;
            _workTimeRecord.WorkOrderId = _model.WorkOrderId;
        });
        await httpClient.PostAsJsonAsync<WorkTimeRecordFormDTO>($"http://localhost:5032/worktimerecord/add/", _workTimeRecord);
        
        RedirectToPage();
    }

}
