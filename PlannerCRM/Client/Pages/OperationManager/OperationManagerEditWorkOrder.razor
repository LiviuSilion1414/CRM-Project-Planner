@page "/operation-manager/edit/workorder/{Id}"

@using PlannerCRM.Shared.DTOs.Workorder.Forms
@using PlannerCRM.Shared.Models

@inject HttpClient httpClient
@inject NavigationManager navManager

@attribute [Authorize(Roles = nameof(Roles.OPERATION_MANAGER))]

<PageTitle>Modifica commessa</PageTitle>

<div class="container-fluid">
    <h1>Modifica commessa</h1>
    <EditForm EditContext="@_editContext" OnValidSubmit="OnClickConfirm">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="Nome commessa">Nome</label>
            <input type="text" class="form-control" @bind="_model.Name" />
            <ValidationMessage For="@(() => _model.Name)"/>
        </div>
        <div class="form-group">
            <label for="Data d'inizio">Data d'inzio</label>
            <input type="date" class="form-control" @bind="@_model.StartDate" />
            <ValidationMessage For="@(() => _model.StartDate)"/>
        </div>
        <div class="form-group">
            <label for="Data di fine">Data di fine</label>
            <input type="date" class="form-control" @bind="@_model.FinishDate" />
            <ValidationMessage For="@(() => _model.FinishDate)"/>
        </div>
        <div class="wrapper-btn">
            <div class="btn-cancel">
                <button type="button" class="btn btn-link" @onclick="OnClickCancel">Annulla</button>
            </div>
            <div class="btn-confirm">
                <button type="submit" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </EditForm>
</div>

<NavigationLock ConfirmExternalNavigation="navLockService.ConfirmedExternalExit" OnBeforeInternalNavigation="navLockService.ConfirmInternalSite"/>

@code {
    [Inject] public NavigationLockService navLockService { get; set; }
    [Parameter] public string Id { get; set; }
    private WorkOrderFormDto _model = new WorkOrderFormDto();
    private EditContext _editContext { get; set; }

    protected override async Task OnInitializedAsync() {
        _model = await httpClient.GetFromJsonAsync<WorkOrderFormDto>($"http://localhost:5032/workorder/get/for/edit/{Id}");
        _editContext = new(_model);
    }

    private void RedirectToPage() {
        navManager.NavigateTo("/operation-manager");
    }

    private async Task OnClickConfirm() {
        await httpClient.PutAsJsonAsync<WorkOrderFormDto>("http://localhost:5032/workorder/edit", _model);
            
        RedirectToPage();
    }

    private void OnClickCancel() {
        RedirectToPage();
    }
}

