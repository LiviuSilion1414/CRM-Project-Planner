@page "/operation-manager/edit/activity/{workorderId:int}/{activityId:int}"

@using PlannerCRM.Shared.DTOs.ActivityDto.Forms
@using PlannerCRM.Shared.DTOs.ActivityDto.Views
@using PlannerCRM.Shared.DTOs.Workorder.Views
@using PlannerCRM.Shared.DTOs.EmployeeDto.Views

@using PlannerCRM.Shared.Models

@inject HttpClient httpClient
@inject NavigationManager navManager

@attribute [Authorize(Roles = nameof(Roles.OPERATION_MANAGER))]

<PageTitle>Operation Manager</PageTitle>

<div class="container-fluid">
    <h1>Modifica attività</h1>
    <EditForm Model="_model" OnValidSubmit="OnClickEditActivity">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="child">
                <div class="child">
                <label for="Nome commessa">Commessa</label>
                    <input type="text" class="form-control" @bind="_currentWorkorder.Name" readonly/>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="Nome attività">Nome</label>
            <input type="text" class="form-control" @bind="_model.Name" required/>
            <ValidationMessage For="@(() => _model.Name)" />
        </div>
        <div class="form-group">
            <label for="Data d'inizio">Data d'inizio</label>
            <input type="date" class="form-control" @bind="@_model.StartDate" required/>
            <ValidationMessage For="@(() => _model.StartDate)" />
        </div>
        <div class="form-group">
            <label for="Data di fine">Data di fine</label>
            <input type="date" class="form-control" @bind="@_model.FinishDate" required/>
            <ValidationMessage For="@(() => _model.FinishDate)" />
        </div>
        <div class="container-fluid">
            <div class="child">
                <label for="Assegna dipendenti">Assegna a dipendenti </label>
                <input type="search" class="form-control" @bind="_selectModel.SelectedEmployee" required/>
                @if (_employees.Count != 0) {
                    <ul>
                        @foreach (var em in _employees) {
                            <li class="dropdown-item" value="@em" @onclick="@(() => OnClickAddAsSelected(em))"> 
                                 @em.Email
                            </li>
                        }
                    </ul>
                }
            </div>
            <div class="child">
                <button type="button" class="btn btn-link"
                    @onclick="@(() => OnClickSearchEmployee(_selectModel.SelectedEmployee))">Cerca</button>
            </div>
            <div class="container-selected-_employees">
                <span>Dipendenti selezionati per questa attività @_model.EmployeesActivities.Count</span> <br>
                <table class="table table-striped">
                    <thead>
                        <th>Nome</th>
                        <th>Email</th>
                    </thead>
                    <tbody>
                        @if (_model.EmployeesActivities.Count != 0) {
                            @foreach (var em in _model.EmployeesActivities) {
                                <tr>
                                    <td> <span> @em.Email </span> </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" value="@em"
                                            @onclick="(() => OnClickRemoveAsSelected(em))">Elimina</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <br>
            </div>
        </div>
        <div class="wrapper-btn">
            <div class="btn-cancel">
                <button type="button" class="btn btn-link" @onclick="OnClickCancel">Annulla</button>
            </div>
            <div class="btn-confirm">
                <button type="submit" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int workorderId { get; set; }
    [Parameter] public int activityId { get; set; }
    private ActivityForm _model = new();
    private ActivitySelectHelperDTO _selectModel = new();
    private List<WorkorderSelectDTO> _workorders = new();
    private WorkorderViewDTO _currentWorkorder = new();
    private List<EmployeeSelectDTO> _employees = new();
    
    protected override async Task OnInitializedAsync() {
        _model.EmployeesActivities = new();

        _currentWorkorder = await httpClient.GetFromJsonAsync<WorkorderViewDTO>($"http://localhost:5032/workorder/get/for/view/{workorderId}");
        _model = await httpClient.GetFromJsonAsync<ActivityForm>($"http://localhost:5032/activity/get/for/edit/{activityId}");
    } 

    private async Task OnClickSearchWorkorder(string workorder) {
        _workorders = await httpClient.GetFromJsonAsync<List<WorkorderSelectDTO>>($"http://localhost:5032/workorder/search/{workorder}");
    }

    private async Task OnClickSetWorkorder(WorkorderSelectDTO workorderSelect) {
        await Task.Run(() => {
            _model.WorkOrderId = workorderSelect.Id;
            _selectModel.SelectedWorkorder = workorderSelect.Name;
        });
    }

    private async Task OnClickSearchEmployee(string employee) {
        _employees = await httpClient.GetFromJsonAsync<List<EmployeeSelectDTO>>($"http://localhost:5032/employee/search/{employee}");
    }

    private void OnClickAddAsSelected(EmployeeSelectDTO employee) {
        foreach (var em in _model.EmployeesActivities.ToList()) {
            if (em.Email != employee.Email) {
                _model.EmployeesActivities.Add(employee);
            }
        }
    }

    private void OnClickRemoveAsSelected(EmployeeSelectDTO employee) {
        foreach (var em in _model.EmployeesActivities.ToList()) {
            if (em.Email == employee.Email) {
                _model.EmployeesActivities.Remove(employee);
            }
        }
    }
    
    private void RedirectToPage() {
        navManager.NavigateTo("/operation-manager");
    }

    private async Task OnClickEditActivity() {
        await httpClient.PutAsJsonAsync<ActivityForm>("http://localhost:5032/activity/edit", _model);

        RedirectToPage();
    }

    private void OnClickCancel() {
        RedirectToPage();
    }
}
