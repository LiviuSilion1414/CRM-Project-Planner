@page "/operation-manager/add/activity"

@using PlannerCRM.Shared.DTOs.ActivityDto.Forms
@using PlannerCRM.Shared.DTOs.ActivityDto.Views
@using PlannerCRM.Shared.DTOs.Workorder.Views
@using PlannerCRM.Shared.DTOs.EmployeeDto.Views

@using PlannerCRM.Shared.Models

@inject NavigationManager navManager
@inject HttpClient httpClient

@attribute [Authorize(Roles = nameof(Roles.OPERATION_MANAGER))]

<PageTitle>Operation Manager</PageTitle>

<div class="container-fluid">
    <h1>Aggiungi attività</h1>
    <EditForm Model="_model" OnValidSubmit="OnClickAddActivity">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="child">
                <div class="child">
                <span class="oi oi-briefcase"></span>
                <label for="Nome commessa">Commessa</label>
                    <input type="search" @bind="_selectModel.SelectedWorkorder" class="form-control" required/>
                    <ul>
                        @foreach (var wo in _workorders) {
                            <li class="dropdown-item" value="@wo" 
                                @onclick="(() => OnClickSetWorkorder(wo))">@wo.Name</li>
                        }
                    </ul>
                </div>
                <div class="child">
                    <button type="button" class="btn btn-link"
                        @onclick="@(() => OnClickSearchWorkorder(_selectModel.SelectedWorkorder))">
                            <span class="oi oi-magnifying-glass"></span>
                            Cerca
                    </button>
                </div>
                <ValidationMessage For="@(() => _model.WorkOrderId)" />
            </div>
        </div>
        <div class="form-group">
            <span class="oi oi-text"></span>
            <label for="Nome attività">Nome</label>
            <input type="text" class="form-control" @bind="_model.Name" required/>
            <ValidationMessage For="@(() => _model.Name)" />
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data d'inizio">Data d'inizio</label>
            <input type="date" class="form-control" @bind="@_model.StartDate" required/>
            <ValidationMessage For="@(() => _model.StartDate)" />
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data di fine">Data di fine</label>
            <input type="date" class="form-control" @bind="@_model.FinishDate" required/>
            <ValidationMessage For="@(() => _model.FinishDate)" />
        </div>
        <div class="container-fluid">
            <div class="child">
                <span class="oi oi-people"></span>
                <label for="Assegna dipendenti">Assegna a dipendenti</label>
                <input type="search" class="form-control" @bind="_selectModel.SelectedEmployee" required/>
                @if (_employees.Count != 0) {
                    <ul>
                        @foreach (var em in _employees) {
                            <li class="dropdown-item" value="@em" 
                                @onclick="@(() => OnClickAddAsSelected(em))"> 
                                    @em.Email
                            </li>
                        }
                    </ul>
                }
            </div>
            <div class="child">
                <button type="button" class="btn btn-link"
                    @onclick="@(() => OnClickSearchEmployee(_selectModel.SelectedEmployee))">
                    <span class="oi oi-magnifying-glass"></span>
                    Cerca
                </button>
            </div>
            <div class="child">
                <div style="width: 400px; height:150px; left: 0; overflow-y: scroll;">
                    <span>Dipendenti selezionati per questa attività @_model.EmployeesActivities.Count</span> <br>
                    <table class="table table-striped">
                        <thead>
                            <th scope="col">Email</th>
                            <th></th>
                        </thead>
                        <tbody>
                            @if (_model.EmployeesActivities.Count != 0) {
                                @foreach (var em in _model.EmployeesActivities) {
                                    <tr>
                                        <td> 
                                            <span class="oi oi-envelope-closed"></span>
                                            <span> @em.Email </span> 
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" value="@em"
                                                @onclick="(() => OnClickRemoveAsSelected(em))">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <br>
                </div>
            </div>
        </div>
        <div class="wrapper-btn">
            <div class="btn-cancel">
                <button type="button" class="btn btn-link" @onclick="OnClickCancel">Annulla</button>
            </div>
            <div class="btn-confirm">
                <button type="submit" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private ActivityForm _model = new();
    private ActivitySelectHelperDTO _selectModel = new();
    private List<WorkorderSelectDTO> _workorders = new();
    private List<EmployeeSelectDTO> _employees = new();

    protected override void OnInitialized() {
       _model.EmployeesActivities = new();
    } 

    private async Task OnClickSearchWorkorder(string workorder) {
        _workorders = await httpClient.GetFromJsonAsync<List<WorkorderSelectDTO>>($"http://localhost:5032/workorder/search/{workorder}");
    }
    private async Task OnClickSetWorkorder(WorkorderSelectDTO workorderSelect) {
        await Task.Run(() => {
            _model.WorkOrderId = workorderSelect.Id;
            _selectModel.SelectedWorkorder = workorderSelect.Name;
        });
    }

    private async Task OnClickSearchEmployee(string employee) {
        _employees = await httpClient.GetFromJsonAsync<List<EmployeeSelectDTO>>($"http://localhost:5032/employee/search/{employee}");
    }

    private void OnClickAddAsSelected(EmployeeSelectDTO employee) {
        _model.EmployeesActivities.Add(employee);
    }

    private void OnClickRemoveAsSelected(EmployeeSelectDTO employee) {
        if (_model.EmployeesActivities.Contains(employee)) {
            _model.EmployeesActivities.Remove(employee);
        }
    }
    
    private async Task OnClickAddActivity() {
        await httpClient.PostAsJsonAsync<ActivityForm>("http://localhost:5032/activity/add", _model);

        navManager.NavigateTo("/operation-manager");
    }

    private void OnClickCancel() {
        navManager.NavigateTo("/operation-manager");
    }
}