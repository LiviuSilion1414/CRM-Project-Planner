@using PlannerCRM.Shared.DTOs.Workorder.Views
@using PlannerCRM.Shared.DTOs.ActivityDto.Forms

@inject HttpClient httpClient
@inject NavigationManager navManager

@if (_activities.Count == 0) {
    <p><em>Nessun'attività assegnata.</em></p>
} else {
    <div class="container-fluid">
        <h3>Attività</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Data d'inizio</th>
                    <th>Data di fine</th>
                    <th>Dipendenti assegnati</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ac in _activities) {
                    <tr>
                        <td>@ac.Name</td>
                        <td>@ac.StartDate.ToShortDateString()</td>
                        <td>@ac.FinishDate.ToShortDateString()</td>
                        <td>
                            @foreach (var em in ac.EmployeesActivities) {
                                <tr>
                                    <td>
                                        @em.Email
                                    </td>
                                </tr>
                            }
                        </td>
                        <td>
                            <button type="button" class="btn btn-primary" 
                                @onclick="@(() => OnClickEdit(ac.Id))">Modifica</button>                
                        </td> 
                        <td> 
                            <button type="button" class="btn btn-danger" 
                                @onclick="@(() => OnClickDelete(ac.Id))">Elimina</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private WorkorderViewDTO _workorder = new(); 
    private List<ActivityForm> _activities = new();

    protected override async Task OnInitializedAsync() {
        _workorder = await httpClient.GetFromJsonAsync<WorkorderViewDTO>($"http://localhost:5032/workorder/get/for/view/{Id}");
        _activities = await httpClient.GetFromJsonAsync<List<ActivityForm>>($"http://localhost:5032/activity/get/activity/per/workorder/{_workorder.Id}"); 
    }

    public void OnClickEdit(int activityId) {
        navManager.NavigateTo($"/operation-manager/edit/activity/{_workorder.Id}/{activityId}");
    }

    public void OnClickDelete(int activityId) {
        navManager.NavigateTo($"/operation-manager/delete/activity/{_workorder.Id}/{activityId}");
    }
}

