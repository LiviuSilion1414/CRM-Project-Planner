@page "/forgot-password"

@layout PublicLayout

@inject NavigationManager nav
@inject FetchService<EmployeeLoginRecoveryDto> fs

<RadzenStack Style="width: 30vw; margin: 0 auto;">
    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Forgot your password"></RadzenText>
    <RadzenCard>
        <RadzenFieldset Text="Account Info">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenLabel Text="Digit some info" />
                </RadzenColumn>
                <RadzenColumn>
                    <EditForm EditContext="_context" OnSubmit="SearchEmployee">
                        <DataAnnotationsValidator />
                        <RadzenTextBox @bind-Value="@model.Name"
                                       Placeholder="Search user by name"
                                       style="margin-bottom: 10px"
                                       type="search" />
                        <ValidationMessage For="@(() => model.Name)" />
                        <RadzenTextBox @bind-Value="@model.Email"
                                       Placeholder="Search user by email"
                                       style="margin-bottom: 10px"
                                       type="search" />
                        <ValidationMessage For="@(() => model.Email)" />
                        <RadzenTextBox @bind-Value="@model.Phone"
                                       Placeholder="Search user by phone number"
                                       style="margin-bottom: 10px"
                                       type="search" />
                        <ValidationMessage For="@(() => model.Phone)" />
                        <RadzenButton ButtonType="ButtonType.Submit"
                                      Variant="Variant.Outlined"
                                      ButtonStyle="ButtonStyle.Primary"
                                      Icon="Search">
                        </RadzenButton>
                    </EditForm>
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenDataGrid TItem="@EmployeeLoginRecoveryDto"
                                    Data="@_employees"
                                    AllowFiltering="true"
                                    AllowSorting="true"
                                    SelectionMode="DataGridSelectionMode.Single"
                                    RowSelect="@SelectEmployee" RowDeselect="@DeselectEmployee">
                        <Columns>
                            <RadzenDataGridColumn TItem="@EmployeeLoginRecoveryDto" Property="Name" Title="Name" />
                        </Columns>
                    </RadzenDataGrid>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>
        @if (selectedModel is not null)
        {
            <RadzenFieldset Text="Selected User">
                <RadzenRow AlignItems="AlignItems.Start" Style="margin-top: 20px;">
                    <RadzenColumn>
                        <RadzenLabel Text="Name"></RadzenLabel>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Start" Style="margin-top: 20px">
                    <RadzenColumn>
                        <RadzenTextBox @bind-Value="@selectedModel.Name" Disabled="true"></RadzenTextBox>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox @bind-Value="@selectedModel.Email" Disabled="true"></RadzenTextBox>
                    </RadzenColumn>
                    <RadzenButton ButtonType="ButtonType.Button"
                                  Variant="Variant.Outlined"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Icon="Delete"
                                  Click="@DeselectEmployee">
                    </RadzenButton>
                </RadzenRow>
            </RadzenFieldset>
        }
    </RadzenCard>
</RadzenStack>

@code
{
    private EmployeeLoginRecoveryDto model;
    private List<EmployeeLoginRecoveryDto> _employees;
    private EditContext _context;

    private EmployeeLoginRecoveryDto selectedModel;

    protected override void OnInitialized()
    {
        model = new();
        _context = new(model);
        _employees = new();
    }

    private async Task SearchEmployee()
    {
        if (_context.Validate())
        {
            _employees = await fs.GetAll(
                EndpointsNames.EMPLOYEE,
                EmployeeEndpointActions.SearchEmployeeByName(model.Name, model.Email, model.Phone)
            );
        }
    }

    private void SelectEmployee(EmployeeLoginRecoveryDto employee)
    {
        selectedModel = employee;
    }

    private void DeselectEmployee()
    {
        selectedModel = null;
    }
}
