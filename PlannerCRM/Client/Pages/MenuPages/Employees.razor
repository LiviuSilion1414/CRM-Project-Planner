@page "/employees"

@layout MainLayout

<h3>Employees</h3>
<PageTitle>Employees</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <RadzenCard>

        @if ((isInsert || isEdit || isView) && _selectedEmployee is not null)
        {
            <RadzenRow>
                <RadzenColumn SizeLG="12">
                    <RadzenButton Icon="chevron_left" ButtonStyle="ButtonStyle.Primary" Text="Back to list" Click="ResetFlags"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        }

        @if (isInsert && _selectedEmployee is not null)
        {
            <EmployeeForm Model="@_selectedEmployee" IsInsert="true" OnReloadList="LoadData" />
        }
        else if (isEdit && _selectedEmployee is not null)
        {
            <EmployeeForm Model="@_selectedEmployee" IsInsert="false" OnReloadList="LoadData" />
        }
        else if (isView && _selectedEmployee is not null)
        {
            <EmployeeDialog SelectedEmployee="_selectedEmployee" OnReloadList="LoadData" />
        }
        else
        {
            <RadzenCard class="mb-3">
                <RadzenRow JustifyContent="JustifyContent.Stretch">
                    <RadzenColumn>
                        <RadzenFormField Text="Role" AllowFloatingLabel="false">
                            <RadzenDropDown TValue="Guid?"
                                            class="form-control" Style="min-width: 20vw;"
                                            Data="_roles"
                                            AllowFiltering="true"
                                            AllowClear="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            TextProperty="@nameof(RoleDto.roleName)"
                                            ValueProperty="@nameof(RoleDto.id)"
                                            @bind-Value="@roleId" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenFormField Text="Employee" AllowFloatingLabel="false">
                            <RadzenTextBox class="form-control" Style="min-width: 20vw;" @bind-Value="@query" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenButton Icon="search_off" ButtonStyle="ButtonStyle.Info" Variant="Variant.Filled" Text="Reset" Click="@ResetData"></RadzenButton>
                        <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Text="Search" Click="@LoadData"></RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>

            <RadzenDataGrid Data="@_employees"
                            TItem="@EmployeeDto"
                            AllowSorting="true"
                            AllowPaging="true"
                            AllowFiltering="true">
                <HeaderTemplate>
                    <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Text="Add" Click="@OnAdd"></RadzenButton>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="@EmployeeDto" Property="@nameof(EmployeeDto.name)" Title="Name" />
                    <RadzenDataGridColumn TItem="@EmployeeDto" Title="Role(s)">
                        <Template Context="data">
                            @ShowRoles(data)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="@EmployeeDto" Property="@nameof(EmployeeDto.email)" Title="Email" />
                    <RadzenDataGridColumn TItem="@EmployeeDto" Property="@nameof(EmployeeDto.phone)" Title="Phone" />
                    <RadzenDataGridColumn TItem="@EmployeeDto" Width="64px" Sortable="false" Filterable="false">
                        <Template Context="data">
                            <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@(() => OnSelect(data))"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="@EmployeeDto" Width="64px" Sortable="false" Filterable="false">
                        <Template Context="data">
                            <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="edit" Click="@(() => OnEdit(data))"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="@EmployeeDto" Width="64px" Sortable="false" Filterable="false">
                        <Template Context="data">
                            <RadzenButton Disabled="@(!data.isRemoveable)" Variant="Variant.Text" IconColor="@Colors.Danger" Icon="delete" Click="@(() => OnDelete(data))"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    </RadzenCard>
}

@code
{
    private List<EmployeeDto> _employees = new();
    private List<RoleDto> _roles = new();

    EmployeeDto? _selectedEmployee = new EmployeeDto();

    private string query = string.Empty;
    private Guid? roleId = Guid.Empty;

    private bool isInsert = false;
    private bool isView = false;
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadData();
    }

    async Task ResetData()
    {
        query = string.Empty;
        roleId = Guid.Empty;
        await LoadData();
    }

    private async Task LoadRoles()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_LIST, new RoleFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _roles = JsonSerializer.Deserialize<List<RoleDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new EmployeeFilterDto
                    {
                        searchQuery = query ?? string.Empty,
                        roleId = roleId ?? Guid.Empty
                    };

            var result = await fetch.ExecuteAsync(ApiUrl.EMPLOYEE_CONTROLLER, ApiUrl.EMPLOYEE_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _employees = JsonSerializer.Deserialize<List<EmployeeDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void ResetFlags()
    {
        isView = false;
        isEdit = false;
        isInsert = false;
        _selectedEmployee = null;
    }

    void OnAdd()
    {
        _selectedEmployee = new();
        isInsert = !isInsert;
    }

    void OnEdit(EmployeeDto employee)
    {
        _selectedEmployee = employee;
        isEdit = !isEdit;
    }

    void OnSelect(EmployeeDto employee)
    {
        _selectedEmployee = employee;
        isView = !isView;
    }

    private async Task OnDelete(EmployeeDto employee)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete employee", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.EMPLOYEE_CONTROLLER, ApiUrl.EMPLOYEE_DELETE,
                                          new EmployeeFilterDto() { employeeId = employee.id },
                                          ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    RenderFragment ShowRoles(EmployeeDto employee)
    {
        return
    @<div>
        @if (employee.roles.OrderBy(x => x.id).FirstOrDefault() != null)
    {
    if (employee.roles.OrderBy(x => x.id).ToList().Count == 1)
    {
        @($"{employee.roles.OrderBy(x => x.id).FirstOrDefault().roleName}")
    }
    else
    {
        @($"{employee.roles.OrderBy(x => x.id).FirstOrDefault().roleName} + {employee.roles.Count - 1}")
    }
    }
    else
    {
        <b>no roles assigned</b>
    }
    </div>;
    }
}