@page "/activities"

<h3>Activities</h3>
<PageTitle>Activities</PageTitle>

<CascadingValue Value="@_dataContainer">
    <DataGridView TItem="@ActivityDto"
                  GetCascadingContainerStates="@GetCascadingContainerStates" />
    <DataGridViewItemHandler TItem="@ActivityDto"
                             AddAction="@(async activity => await ActivityFetchService.Create(CrudApiManager.ADD, activity))"
                             UpdateAction="@(async activity => await ActivityFetchService.Update(CrudApiManager.EDIT, activity))"
                             DeleteAction="@(async activity => await DeleteActivity(activity))"
                             DeleteMultipleAction="@(async activities => await DeleteMultipleActivities(activities))">
        <AddFormMarkup>
            <ActivityAddForm />
        </AddFormMarkup>
        <EditFormMarkup>
            <ActivityEditForm />
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <ActivityViewForm />
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    [Inject] public IFetchService<ActivityDto> ActivityFetchService { get; set; }
    [Inject] public IFetchService<WorkOrderDto> WorkOrderFetchService { get; set; }

    private CascadingDataContainer<ActivityDto> _dataContainer = new()
        {
            DataManager = new()
            {
                SelectedProperties = ["Name", "StartDate", "EndDate"]
            }
        };

    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private void GetCascadingContainerStates(CascadingDataContainer<ActivityDto> dataContainer)
        => _dataContainer = dataContainer;

    private async Task DeleteActivity(ActivityDto activity)
        => await ActivityFetchService.Delete(CrudApiManager.DELETE, activity.Id);

    private async Task DeleteMultipleActivities(IEnumerable<ActivityDto> activitys)
    {
        foreach (var activity in activitys)
        {
            await DeleteActivity(activity);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
        => _dataContainer.DataManager.MainItems =
                await ActivityFetchService.GetAll(CrudApiManager.GET_WITH_PAGINATION, paginationHelper.Offset, paginationHelper.Limit);
}
