@page "/activities"

<h3>Activities</h3>
<PageTitle>Activities</PageTitle>


@code {
    [Inject] public FetchService<ActivityDto> ActivityFetchService { get; set; }
    [Inject] public FetchService<WorkOrderDto> WorkOrderFetchService { get; set; }

    private CascadingDataContainer<ActivityDto> _dataContainer { get; set; } = new()
    {
        DataManager = new()
        {
            MainItems = [],
            SelectedItems = [],
            SelectedProperties = ["Name", "StartDate", "EndDate"],
            NewItem = new()
            {
                WorkOrder = new()
                {
                    FirmClient = new()
                }
            },
            SelectedItem = new()
        }
    };

    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private void GetCascadingContainerStates(CascadingDataContainer<ActivityDto> dataContainer)
        => _dataContainer = dataContainer;

    private async Task DeleteActivity(ActivityDto activity)
        => await ActivityFetchService.Delete(ControllersNames.ACTIVITY, CrudApiManager.DELETE, activity.Id);

    private async Task DeleteMultipleActivities(IEnumerable<ActivityDto> activitys)
    {
        foreach (var activity in activitys)
        {
            await DeleteActivity(activity);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
        => _dataContainer.DataManager.MainItems =
                await ActivityFetchService.GetAll(ControllersNames.ACTIVITY, CrudApiManager.GET_WITH_PAGINATION, paginationHelper.Limit, paginationHelper.Offset);
}
