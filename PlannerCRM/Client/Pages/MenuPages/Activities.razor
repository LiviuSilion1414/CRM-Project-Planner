@page "/activities"
@inject HttpClient http

<h3>Activities</h3>
<PageTitle>Activities</PageTitle>

<CascadingValue Value="@_dataContainer">
    <DataGridView 
        TItem="@ActivityDto"
        GetCascadingContainerStates="@GetCascadingContainerStates"
        ShouldFetchNewData="@ReloadUpdatedData" 
    />
    <DataGridViewItemHandler TItem="@ActivityDto"
        AddAction="@(async activity => await AddActivity(activity))"
        UpdateAction="@(async activity => await UpdateActivity(activity))"
        DeleteAction="@(async activity => await DeleteActivity(activity))"
        DeleteMultipleAction="@(async activities => await DeleteMultipleWorkOrders(activities))"
    >
        <AddFormMarkup>
            <ActivityAddForm/>
        </AddFormMarkup>
        <EditFormMarkup>
            <ActivityEditForm/>
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <ActivityViewForm/>
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    private CascadingDataContainer<ActivityDto> _dataContainer = new()
        {
            DataManager = new()
            {
                SelectedProperties = ["Name", "StartDate", "EndDate"]
            }
        };

    private List<WorkOrderDto> _workOrders = [];

    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private async Task ReloadUpdatedData(bool shouldReload)
    {
        if (shouldReload)
        {
            await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
        }
    }

    private void GetCascadingContainerStates(CascadingDataContainer<ActivityDto> dataContainer) 
        => _dataContainer = dataContainer;

    private async Task AddActivity(ActivityDto updatedActivity) 
        => await http.PostAsJsonAsync("api/activity/add", updatedActivity);

    private async Task UpdateActivity(ActivityDto updatedActivity) 
        => await http.PutAsJsonAsync($"api/activity/edit/{updatedActivity.Id}", updatedActivity);

    private async Task DeleteActivity(ActivityDto activity) 
        => await http.DeleteAsync($"api/activity/delete/{activity.Id}");

    private async Task DeleteMultipleWorkOrders(IEnumerable<ActivityDto> activitys)
    {
        foreach (var activity in activitys)
        {
            await DeleteActivity(activity);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
        => _dataContainer.DataManager.MainItems = 
            await http.GetFromJsonAsync<List<ActivityDto>>(
                $"/api/activity/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
}
