@page "/clients"
@inject DialogService ds
@inject FetchService<FirmClientDto> fs
@inject FetchService<WorkOrderDto> wfs

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

<RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Add" Click="@OnAdd"></RadzenButton>

<RadzenDataGrid Data="@_clients"
TItem="@FirmClientDto"
AllowSorting="true"
AllowPaging="true"
AllowFiltering="true"
SelectionMode="DataGridSelectionMode.Single"
RowSelect="OnSelect">
    <Columns>
        <RadzenDataGridColumn TItem="@FirmClientDto" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="@FirmClientDto" Property="VatNumber" Title="Vat Number" />
    </Columns>
</RadzenDataGrid>

@code {
    private List<FirmClientDto> _clients = new();

    private bool _isSelected = false;
    private FirmClientDto _selectedClient = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _clients = await fs.GetAll(
            EndpointsNames.FIRM_CLIENT,
            EndpointsCrudActions.GET_WITH_PAGINATION,
            100,
            0
        );

        await LoadRelatedWorkOrders();
    }

    private async Task LoadRelatedWorkOrders()
    {
        foreach (var cl in _clients)
        {
            cl.WorkOrders = await wfs.GetAll(
                EndpointsNames.FIRM_CLIENT,
                ClientEndpointActions.FindAssociatedWorkOrdersByClientId(cl.Guid)
            );
        }
    }

    private async Task OnSelect(FirmClientDto client)
    {
        _selectedClient = client;

        await ds.OpenAsync<ClientDialog>("Client Info",
            new Dictionary<string, object>() 
            { 
                { nameof(ClientDialog.SelectedClient), _selectedClient },
            }
        );
    }

    private async Task OnAdd()
    {
        await ds.OpenAsync<ClientAddForm>("Add Client", null, new DialogOptions() { Width = "40vw;" });
    }
}