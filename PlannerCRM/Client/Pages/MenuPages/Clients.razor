@page "/clients"

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <RadzenCard>
        @if ((isInsert || isEdit || isView || isWorkOrderView) && (_selectedClient is not null || _selectedWorkOrder is not null))
        {
            <RadzenRow>
                <RadzenColumn SizeLG="12">
                    <RadzenButton Icon="chevron_left" ButtonStyle="ButtonStyle.Primary" Text="Back to list" Click="ResetFlags"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        }

        @if (isInsert && _selectedClient is not null)
        {
            <ClientForm Model="@_selectedClient" IsInsert="true" OnReloadList="@LoadData" />
        }
        else if (isEdit && _selectedClient is not null)
        {
            <ClientForm Model="@_selectedClient" IsInsert="false" OnReloadList=@LoadData />
        }
        else if (isView && _selectedClient is not null)
        {
            <ClientDialog SelectedClient="_selectedClient" />
        }
        else if (isWorkOrderView && _selectedWorkOrder is not null)
        {
            <WorkOrderDialog SelectedWorkOrder="_selectedWorkOrder" />
        }
        else
        {
            <Clients_MasterDetail Clients="_clients"
                                  OnSearch="LoadData"
                                  OnReset="ResetData"
                                  OnAddClient="OnAdd"
                                  OnEditClient="OnEdit"
                                  OnDeleteClient="OnDelete"
                                  OnWorkOrderOverview="OnWorkOrderSelect" />
        }
    </RadzenCard>
}

@code
{
    private List<FirmClientDto> _clients = new List<FirmClientDto>();

    WorkOrderDto? _selectedWorkOrder = new WorkOrderDto();
    FirmClientDto? _selectedClient = new FirmClientDto();

    private bool isInsert = false;
    private bool isView = false;
    private bool isEdit = false;
    private bool isWorkOrderView = false;
    string query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task ResetData()
    {
        await LoadData();
    }

    async Task Search(string query)
    {
        this.query = query;
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new FirmClientFilterDto
                {
                    searchQuery = query
                };

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void ResetFlags()
    {
        isWorkOrderView = false;
        isView = false;
        isEdit = false;
        isInsert = false;
        _selectedWorkOrder = null;
        _selectedClient = null;
    }

    void OnAdd()
    {
        _selectedClient = new();
        isInsert = !isInsert;
    }

    void OnEdit(FirmClientDto client)
    {
        _selectedClient = client;
        isEdit = !isEdit;
    }

    void OnSelect(FirmClientDto client)
    {
        _selectedClient = client;
        isView = !isView;
    }

    void OnWorkOrderSelect(WorkOrderDto workOrder)
    {
        _selectedWorkOrder = workOrder;
        isWorkOrderView = !isWorkOrderView;
    }

    private async Task OnDelete(FirmClientDto client)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete client", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_DELETE,
                                                      new FirmClientFilterDto() { firmClientId = client.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}