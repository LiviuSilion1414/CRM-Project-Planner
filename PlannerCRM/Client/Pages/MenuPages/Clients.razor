@page "/clients"

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Add" Click="@OnAdd"></RadzenButton>

    <RadzenDataGrid Data="@_clients"
                    TItem="@FirmClientDto"
                    AllowSorting="true"
                    AllowPaging="true"
                    AllowFiltering="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="OnSelect">
        <Columns>
            <RadzenDataGridColumn TItem="@FirmClientDto" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="@FirmClientDto" Property="VatNumber" Title="Vat Number" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<FirmClientDto> _clients = new();

    private bool _isSelected = false;
    private FirmClientDto _selectedClient = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadRelatedWorkOrders();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;
            var filter = new SearchFilterDto()
                {
                    Limit = 100,
                    Offset = 0
                };

            var result = await fetch.ExecuteAsync(ClientEndpointActions.GET_WITH_PAGINATION_BASE, filter, ApiType.Post);
            if (result.Data is not null)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.Data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch (Exception ex)
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task LoadRelatedWorkOrders()
    {
        try
        {
            fetch.IsBusy = true;
            var filter = new SearchFilterDto()
                {
                    Limit = 10000,
                    Offset = 0
                };

            foreach (var cl in _clients)
            {
                var result = await fetch.ExecuteAsync(WorkOrderEndpointActions.GET_WITH_PAGINATION_BASE, filter, ApiType.Post);
                cl.WorkOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.Data.ToString());
            }

            fetch.IsBusy = false;
        }
        catch (Exception ex)
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnSelect(FirmClientDto client)
    {
        _selectedClient = client;

        await dialog.OpenAsync<ClientDialog>("Client Info",
            new Dictionary<string, object>()
                {
                { nameof(ClientDialog.SelectedClient), _selectedClient },
                }
        );
    }

    private async Task OnAdd()
    {
        await dialog.OpenAsync<ClientAddForm>("Add Client", null, new DialogOptions() { Width = "40vw;" });
    }
}