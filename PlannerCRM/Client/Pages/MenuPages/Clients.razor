@page "/clients"

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <Clients_MasterDetail Clients="_clients"
                  OnSearch="LoadData"
                  OnReset="ResetData"
                  OnAddClient="OnAdd"
                  OnEditClient="OnEdit"
                  OnDeleteClient="OnDelete"
                  OnWorkOrderOverview="OnWorkOrderOverview"/>
}


@code {
    private List<FirmClientDto> _clients = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task ResetData()
    {
        await LoadData();
    }

    private async Task LoadData(string query = "")
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new FirmClientFilterDto
                {
                    searchQuery = query
                };

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnWorkOrderOverview(WorkOrderDto workOrder)
    {
        await dialog.OpenSideAsync<WorkOrderDialog>("WorkOrder Info",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderDialog.SelectedWorkOrder), workOrder },
                { nameof(WorkOrderDialog.OnReloadList), EventCallback.Factory.Create(this, () => LoadData()) },
                { nameof(WorkOrderDialog.OnCloseSide), EventCallback.Factory.Create(this, dialog.CloseSide) }
            },
            new SideDialogOptions() { Width="40vw" }
        );
    }

    private async Task OnEdit(FirmClientDto client)
    {
        await dialog.OpenAsync<ClientForm>("Edit Client",
            new Dictionary<string, object>()
            {
                { nameof(ClientForm.Model), client },
                { nameof(ClientForm.IsInsert), false },
                { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, () => LoadData()) }
            });
    }

    private async Task OnAdd()
    {
        await dialog.OpenAsync<ClientForm>("Add Client",
            new Dictionary<string, object>()
            {
                { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, () => LoadData()) },
                { nameof(ClientForm.IsInsert), true }
            });
    }

    private async Task OnDelete(FirmClientDto client)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete client", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_DELETE,
                                                      new FirmClientFilterDto() { firmClientId = client.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}