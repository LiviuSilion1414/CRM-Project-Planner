@page "/clients"

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    @* <RadzenCard class="mb-3"> *@
    @*     <RadzenRow JustifyContent="JustifyContent.Stretch"> *@
    @*         <RadzenColumn> *@
    @*             <RadzenFormField Text="Client" AllowFloatingLabel="false"> *@
    @*                 <RadzenTextBox class="form-control" Style="min-width: 30vw;" @bind-Value="@query" /> *@
    @*             </RadzenFormField> *@
    @*         </RadzenColumn> *@
    @*         <RadzenColumn> *@
    @*             <RadzenButton Icon="search_off" ButtonStyle="ButtonStyle.Info" Variant="Variant.Filled" Text="Reset" Click="@ResetData"></RadzenButton> *@
    @*             <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Text="Search" Click="@LoadData"></RadzenButton> *@
    @*         </RadzenColumn> *@
    @*     </RadzenRow> *@
    @* </RadzenCard> *@
    @* <RadzenDataGrid Data="@_clients" *@
    @*                 TItem="@FirmClientDto" *@
    @*                 AllowSorting="true" *@
    @*                 AllowPaging="true" *@
    @*                 AllowFiltering="true"> *@
    @*     <HeaderTemplate> *@
    @*         <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Text="Add" Click="@OnAdd"></RadzenButton> *@
    @*     </HeaderTemplate> *@
    @*     <Columns> *@
    @*         <RadzenDataGridColumn TItem="@FirmClientDto" Property="@nameof(FirmClientDto.name)" Title="Name" /> *@
    @*         <RadzenDataGridColumn TItem="@FirmClientDto" Property="@nameof(FirmClientDto.vatNumber)" Title="Vat Number" /> *@
    @*         <RadzenDataGridColumn TItem="@FirmClientDto" Width="64px" Sortable="false" Filterable="false"> *@
    @*             <Template Context="data"> *@
    @*                 <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@(() => OnSelect(data))"></RadzenButton> *@
    @*             </Template> *@
    @*         </RadzenDataGridColumn> *@
    @*         <RadzenDataGridColumn TItem="@FirmClientDto" Width="64px" Sortable="false" Filterable="false"> *@
    @*             <Template Context="data"> *@
    @*                 <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="edit" Click="@(() => OnEdit(data))"></RadzenButton> *@
    @*             </Template> *@
    @*         </RadzenDataGridColumn> *@
    @*         <RadzenDataGridColumn TItem="@FirmClientDto" Width="64px" Sortable="false" Filterable="false"> *@
    @*             <Template Context="data"> *@
    @*                 <RadzenButton Variant="Variant.Text" IconColor="@Colors.Danger" Icon="delete" Click="@(() => OnDelete(data))"></RadzenButton> *@
    @*             </Template> *@
    @*         </RadzenDataGridColumn> *@
    @*     </Columns> *@
    @* </RadzenDataGrid> *@
    <MasterDetail Clients="_clients"
                  OnSearch="LoadData"
                  OnReset="ResetData"/>
}


@code {
    private List<FirmClientDto> _clients = new();

    private string query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task ResetData()
    {
        query = string.Empty;
        await LoadData();
    }

    private async Task LoadData(string query = "")
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new FirmClientFilterDto
                {
                    searchQuery = query
                };

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    // private async Task OnSelect(FirmClientDto client)
    // {
    //     await dialog.OpenSideAsync<ClientDialog>("Client Info",
    //         new Dictionary<string, object>()
    //         {
    //             { nameof(ClientDialog.SelectedClient), client },
    //             { nameof(ClientDialog.OnReloadList), EventCallback.Factory.Create(this, LoadData) },
    //             { nameof(ActivityDialog.OnCloseSide), EventCallback.Factory.Create(this, dialog.CloseSide) }
    //         },
    //         new SideDialogOptions() { Width="40vw" }
    //     );
    // }

    // private async Task OnEdit(FirmClientDto client)
    // {
    //     await dialog.OpenAsync<ClientForm>("Edit Client",
    //         new Dictionary<string, object>()
    //         {
    //             { nameof(ClientForm.Model), client },
    //             { nameof(ClientForm.IsInsert), false },
    //             { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, LoadData) }
    //         },
    //         new DialogOptions() { Width = "40vw;", Height = "30vh" }
    //     );
    // }

    // private async Task OnAdd()
    // {
    //     await dialog.OpenAsync<ClientForm>("Add Client",
    //         new Dictionary<string, object>()
    //         {
    //             { nameof(ClientForm.OnReloadList), EventCallback.Factory.Create(this, LoadData) },
    //             { nameof(ClientForm.IsInsert), true }
    //         },
    //         new DialogOptions() { Width = "40vw;", Height = "30vh" });
    // }

    private async Task OnDelete(FirmClientDto client)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete client", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_DELETE,
                                                      new FirmClientFilterDto() { firmClientId = client.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}