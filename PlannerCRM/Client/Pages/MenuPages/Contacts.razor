@page "/contacts"
@inject HttpClient http

<CascadingValue Value="@_dataContainer">
    <DataGridView TItem="@FirmClientDto"
                  TTemp="@WorkOrderDto"
                  GetCascadingContainerStates="@GetCascadingContainerStates"
                  ShouldFetchNewData="@ReloadUpdatedData" />

    <DataGridViewItemHandler TItem="@FirmClientDto"
                             TTemp="@WorkOrderDto"
                             AddAction="@(async client => await AddClient(client))"
                             UpdateAction="@(async client => await UpdateClient(client))"
                             DeleteAction="@(async client => await DeleteClient(client))"
                             DeleteMultipleAction="@(async clients => await DeleteMultipleClients(clients))">
        <AddFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.NewItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.NewItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.NewItem.VatNumber):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.NewItem.VatNumber" />
            </div>
        </AddFormMarkup>
        <EditFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.SelectedItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.SelectedItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.SelectedItem.VatNumber):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.SelectedItem.VatNumber" />
            </div>
        </EditFormMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    private CascadingDataContainer<FirmClientDto, WorkOrderDto> _dataContainer = new()
    {
        DataManager = new() 
        {
            SelectedProperties = ["Name", "VatNumber"]
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = 200, Offset = 0 });
    }

    private async Task ReloadUpdatedData(bool shouldReload)
    {
        if (shouldReload)
        {
            await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
        }
    }

    private void GetCascadingContainerStates(CascadingDataContainer<FirmClientDto, WorkOrderDto> dataContainer) => _dataContainer = dataContainer;

    private async Task AddClient(FirmClientDto updatedClient) => await http.PostAsJsonAsync("api/client/add", updatedClient);

    private async Task UpdateClient(FirmClientDto updatedClient) => await http.PutAsJsonAsync($"api/client/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteClient(FirmClientDto client) => await http.DeleteAsync($"api/client/delete/{client.Id}");

    private async Task DeleteMultipleClients(IEnumerable<FirmClientDto> clients)
    {
        foreach (var client in clients)
        {
            await DeleteClient(client);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _dataContainer.DataManager.MainItems = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}