@page "/contacts"
@inject HttpClient http

<style>
    .master-detail-container {
    margin-top: 20px;
    display: flex;
    }

    .actions {
    width: 100px;
    display: flex;
    flex-direction: column;
    margin-right: 20px;
    }

    .action {
    width: auto;
    height: max-content;
    padding-bottom: 5px;
    }

    .master, .detail {
    display: inline-block;
    width: 50vw;
    }

    .detail {
    padding-left: 50px;
    }

    .over {
    position: fixed;
    }
</style>

<div class="master-detail-container">
    <div class="actions">
        <div class="action">
            <button class="action btn btn-outline-primary" @onclick="IsAddClicked">Add</button>
        </div>

        @if (_isItemSelected || _isEditSelected || _isDeleteSelected)
        {
            <div class="action">
                <button class="action btn btn-outline-info" @onclick="IsEditSelected">Edit</button>
            </div>
            <div>
                <button class="action btn btn-outline-danger" @onclick="IsDeleteSelected">Delete</button>
            </div>
        }

    </div>
    @if (_clients is not null)
    {
        <div class="master">
            <DataGridView TItem="@FirmClientDto"
            Data="@_clients"
            Properties="@_selectedColumnsForClient"
            RowSelect="@OnItemSelected"
            RowEdit="IsEditSelected"
            RowDelete="IsDeleteSelected" />
        </div>
    }
    @if (_isItemSelected)
    {
        <div class="over">
            <ItemPanel TItem="@FirmClientDto"
            Item="@_selectedClient"
            Properties="@_selectedColumnsForClient"
            OnEdit="@IsEditSelected"
            OnDelete="@IsDeleteSelected">
                <Content>
                    <DataGridView TItem="@WorkOrderDto"
                    Data="@_selectedClient.WorkOrdersDto"
                    Properties="@_selectedColumnsForWorkOrder"/>
                </Content>
            </ItemPanel>
        </div>
    }

    @if (_isAddClicked)
    {
        <div class="detail">
            <FormView TItem="@FirmClientDto" Model="@_clientDto" OnItemChanged="@AddItem">
                <FormContent Context="formcontent">
                    <div class="form-group">
                        <label>@nameof(_clientDto.Name):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_clientDto.Name" />
                    </div>
                    <div class="form-group">
                        <label>@nameof(_clientDto.VatNumber):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_clientDto.VatNumber" />
                    </div>
                </FormContent>
            </FormView>
        </div>
    }

    @if (_isEditSelected)
    {
        <div class="detail">
            <FormView TItem="@FirmClientDto" Model="@_selectedClient" OnItemChanged="@UpdateItem">
                <FormContent Context="formcontent">
                    <div class="form-group">
                        <label>@nameof(_selectedClient.Name):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_selectedClient.Name" />
                    </div>
                    <div class="form-group">
                        <label>@nameof(_selectedClient.VatNumber):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_selectedClient.VatNumber" />
                    </div>
                    <div class="form-group">
                        <br />
                        <label>WorkOrders</label>
                        <div class="master">
                            <DataGridView TItem="@WorkOrderDto"
                            Data="@_selectedClient.WorkOrdersDto"
                            Properties="@_selectedColumnsForClient" />
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="@IsAddWorkOrderClicked">Add WorkOrder</button>
                        @if (_isAddWorkOrderClicked)
                        {
                            <FormView TItem="@WorkOrderDto" Model="@_workOrderDto" OnItemChanged="AddWorkOrder">
                                <FormContent>
                                    <div class="form-group">
                                        <label>@nameof(_workOrderDto.Name):</label>
                                        <InputText class="form-control w-auto" @bind-Value="@_workOrderDto.Name" />
                                    </div>
                                    <div class="form-group">
                                        <label>@nameof(_workOrderDto.CreationTime):</label>
                                        <InputDate class="form-control w-auto" @bind-Value="@_workOrderDto.StartDate" />
                                    </div>
                                    <div class="form-group">
                                        <label>@nameof(_workOrderDto.EndDate):</label>
                                        <InputDate class="form-control w-auto" @bind-Value="@_workOrderDto.EndDate" />
                                    </div>
                                    <br />
                                    <h6>Client information:</h6>
                                    <div class="form-group">
                                        <label>Name: </label>
                                        <p class="form-control w-auto">"@_selectedClient.Name"</p>
                                        <label>VatNumber: </label>
                                        <p class="form-control w-auto">"@_selectedClient.VatNumber"</p>
                                    </div>
                                </FormContent>
                            </FormView>
                        }
                    </div>
                    <div class="form-group">
                        <br />
                        <label>WorkOrders</label>
                        <div class="master">
                            <DataGridView TItem="@WorkOrderDto"
                            Data="@_selectedClient.WorkOrdersDto"
                            Properties="@_selectedColumnsForClient" />
                        </div>
                    </div>
                </FormContent>
            </FormView>
        </div>
    }
</div>

@code {
    private List<FirmClientDto> _clients;
    private List<string> _selectedColumnsForClient = ["Name", "VatNumber"];

    private List<string> _selectedColumnsForWorkOrder = ["Name", "CreationTime", "StartDate", "EndDate"];

    private int _displayCount = (int)ItemsCount.T100;
    private FirmClientDto _selectedClient = null;

    private FirmClientDto _clientDto = new();
    private WorkOrderDto _workOrderDto = new();

    private bool _isAddClicked = false;
    private bool _isEditSelected = false;
    private bool _isDeleteSelected = false;
    private bool _isItemSelected = false;

    private bool _isAddWorkOrderClicked = false;
    private bool _isEditWorkOrderClicked = false;
    private bool _isDeleteWorkOrderClicked = false;

    private void IsAddWorkOrderClicked() => _isAddWorkOrderClicked = !_isAddWorkOrderClicked;
    private void IsEditWorkOrderClicked() => _isEditWorkOrderClicked = !_isEditWorkOrderClicked;
    private void IsDeleteWorkOrderClicked() => _isDeleteWorkOrderClicked = !_isDeleteWorkOrderClicked;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = _displayCount, Offset = 0 });
    }

    private void OnItemSelected(FirmClientDto client)
    {
        _selectedClient = client;
        _isItemSelected = !_isItemSelected;
    }

    private void IsAddClicked() => _isAddClicked = !_isAddClicked;

    private void IsEditSelected() => _isEditSelected = !_isEditSelected;

    private async Task IsDeleteSelected()
    {
        _isDeleteSelected = !_isDeleteSelected;
        if (_isDeleteSelected)
        {
            await DeleteItem();
        }
    }

    private async Task AddItem(FirmClientDto updatedClient)
    {
        await http.PostAsJsonAsync<FirmClientDto>($"api/client/add", updatedClient);
        StateHasChanged();
    }

    private async Task UpdateItem(FirmClientDto updatedClient)
    {
        await http.PutAsJsonAsync<FirmClientDto>($"api/client/edit/{updatedClient.Id}", updatedClient);
        StateHasChanged();
    }

    private async Task DeleteItem()
    {
        await http.DeleteAsync($"api/client/delete/{_selectedClient.Id}");
        StateHasChanged();
    }

        private async Task AddWorkOrder(WorkOrderDto updatedClient)
    {
        await http.PostAsJsonAsync<WorkOrderDto>($"api/workOrder/add", updatedClient);
        StateHasChanged();
    }

    private async Task UpdateWorkOrder(WorkOrderDto updatedClient)
    {
        await http.PutAsJsonAsync<WorkOrderDto>($"api/workOrder/edit/{updatedClient.Id}", updatedClient);
        StateHasChanged();
    }

    private async Task DeleteWorkOrder()
    {
        await http.DeleteAsync($"api/workOrder/delete/{_selectedClient.Id}");
        StateHasChanged();
    }

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}
