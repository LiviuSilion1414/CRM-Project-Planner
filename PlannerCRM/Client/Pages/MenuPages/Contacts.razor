@page "/contacts"
@inject HttpClient http

<style>
    .master-detail-container {
        margin-top: 20px;
        display: flex;
    }

    .filters-container {
        display: flex;
    }

    .master, .detail {
        display: inline-block;
        width: 50vw;
    }

    .detail {
        padding-left: 50px;
    }
</style>

<div class="master-detail-container">
    @if (_clients is not null)
    {
        <div class="master">
            <DataGridView 
            TItem="@FirmClientDto" 
            Data="@_clients" 
            Properties="@_selectedColumns"
            RowSelect="@OnItemSelected"
            RowEdit="IsEditSelected"
            RowDelete="IsDeleteSelected"/>
        </div>
    }
    <div class="detail">
        @if (_isItemSelected)
        {
            <ItemPanel 
            TItem="@FirmClientDto" 
            Item="@_selectedClient" 
            Properties="@_selectedColumns" 
            OnEdit="@IsEditSelected" 
            OnDelete="@IsDeleteSelected" />
        }
        else if (_isEditSelected)
        {
            <FormView TItem="@FirmClientDto" Model="@_selectedClient" OnUpdatedItem="@UpdateItem">
                <FormContent Context="formcontent">
                    <div class="form-group">
                        <label>@nameof(_selectedClient.Name):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_selectedClient.Name" />
                    </div>
                    <div class="form-group">
                        <label>@nameof(_selectedClient.VatNumber):</label>
                        <InputText class="form-control w-auto" @bind-Value="@_selectedClient.VatNumber" />
                    </div>
                </FormContent>
            </FormView>
        }
        else if (_isDeleteSelected)
        {
            <AlertComponent IsDeleteConfirmed="OnDeleteConfirmed" />
        }
        else
        {}
    </div>
</div>

@code {
    private List<FirmClientDto> _clients;
    private List<string> _selectedColumns = ["Name", "VatNumber"];

    private int _displayCount = (int)ItemsCount.T100;
    private FirmClientDto _selectedClient = null;

    private bool _isAddClicked = false;
    private bool _isEditSelected = false;
    private bool _isDeleteSelected = false;
    private bool _isItemSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = _displayCount, Offset = 0 });
    }

    private void OnItemSelected(FirmClientDto client) 
    {
        _selectedClient = client;
        _isItemSelected = !_isItemSelected;
    }

    private void IsAddClicked() => _isAddClicked = !_isAddClicked;

    private void IsEditSelected() => _isEditSelected = !_isEditSelected;

    private void IsDeleteSelected() => _isDeleteSelected = !_isDeleteSelected;


    private async Task UpdateItem(FirmClientDto updatedClient)
    {
        await http.PutAsJsonAsync<FirmClientDto>($"api/client/edit/{updatedClient.Id}", updatedClient);
        StateHasChanged();
    }

    private async Task OnDeleteConfirmed(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await http.DeleteAsync($"api/client/delete/{_selectedClient.Id}");
            StateHasChanged();
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}
