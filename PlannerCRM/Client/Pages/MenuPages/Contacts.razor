@page "/contacts"
@inject HttpClient http

<DataGridView TItem="@FirmClientDto"
              Data="@_clients"
              Properties="@_selectedColumnsForClient"
              RowAdd="@ToggleAddClient"
              RowSelect="@ToggleSelectClient"
              RowEdit="ToggleEditClient"
              RowDelete="ToggleDeleteClient" />

@if (_isAddClientClicked)
{
    <FormView Title="Add new client " TItem="@FirmClientDto" Model="@_clientDto" OnItemChanged="@OnClientDataAdded">
        <FormContent>
            <div class="form-group">
                <label>@nameof(_clientDto.Name):</label>
                <InputText class="form-control" @bind-Value="@_clientDto.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_clientDto.VatNumber):</label>
                <InputText class="form-control" @bind-Value="@_clientDto.VatNumber" />
            </div>
        </FormContent>
    </FormView>
}

@if (_isEditClientClicked)
{
    <FormView Title="Add new client " TItem="@FirmClientDto" Model="@_selectedClient" OnItemChanged="@OnClientDataAdded">
        <FormContent>
            <div class="form-group">
                <label>@nameof(_selectedClient.Name):</label>
                <InputText class="form-control" @bind-Value="@_selectedClient.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_selectedClient.VatNumber):</label>
                <InputText class="form-control" @bind-Value="@_selectedClient.VatNumber" />
            </div>
        </FormContent>
    </FormView>
}

@if (_isDeleteClientClicked)
{
    <AlertComponent Title="Sure to delete this item?"
                    BodyMessage="The action is irreversible!"
                    IsDeleteConfirmed="@OnClientDeleteConfirmation" />
}

@code {
    private List<FirmClientDto> _clients;
    private List<string> _selectedColumnsForClient = ["Name", "VatNumber"];

    private FirmClientDto _selectedClient = new();
    private FirmClientDto _clientDto = new();

    private bool _isAddClientClicked = false;
    private bool _isEditClientClicked = false;
    private bool _isDeleteClientClicked = false;
    private bool _isClientSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
    }

    private void OnClientDataAdded(FirmClientDto client) => _clientDto = client;

    private void OnClientDataUpdated(FirmClientDto client) => _selectedClient = client;

    private async Task OnClientDeleteConfirmation(bool isConfirmed) => await DeleteClient();

    private void ToggleAddClient() => _isAddClientClicked = !_isAddClientClicked;


    private void ToggleSelectClient(FirmClientDto client)
    {
        _selectedClient = client;
        _isClientSelected = !_isClientSelected;
    }

    private void ToggleEditClient(FirmClientDto client)
    {
        _selectedClient = client;
        _isEditClientClicked = !_isEditClientClicked;
    }

    private void ToggleDeleteClient(FirmClientDto client)
    {
        _selectedClient = client;
        _isDeleteClientClicked = !_isDeleteClientClicked;
    }

    private async Task AddClient(FirmClientDto updatedClient) => await http.PostAsJsonAsync("api/client/add", updatedClient);

    private async Task UpdateClient(FirmClientDto updatedClient) => await http.PutAsJsonAsync($"api/client/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteClient() => await http.DeleteAsync($"api/client/delete/{_selectedClient.Id}");

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}