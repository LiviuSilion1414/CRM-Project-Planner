@page "/contacts"
@inject HttpClient http

<DataGridView TItem="@FirmClientDto"
              Data="@_clients"
              Properties="@_selectedColumnsForClient"
              RowAdd="@ToggleAddClient"
              RowSelect="@ToggleSelectClient"
              RowEdit="ToggleEditClient"
              RowDelete="ToggleDeleteClient" />
@code {
    private List<FirmClientDto> _clients;
    private List<string> _selectedColumnsForClient = ["Name", "VatNumber"];

    private FirmClientDto _selectedClient = new();
    private FirmClientDto _clientDto = new();

    private bool _isAddClientClicked = false;
    private bool _isEditClientClicked = false;
    private bool _isDeleteClientClicked = false;
    private bool _isClientSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
    }

    private void ToggleSelectClient() => _isClientSelected = !_isClientSelected;

    private void ToggleAddClient() => _isAddClientClicked = !_isAddClientClicked;

    private void ToggleEditClient() => _isEditClientClicked = !_isEditClientClicked;

    private async Task ToggleDeleteClient()
    {
        _isDeleteClientClicked = !_isDeleteClientClicked;
        await DeleteClient();
    }

    private async Task AddClient(FirmClientDto updatedClient) => await http.PostAsJsonAsync("api/client/add", updatedClient);

    private async Task UpdateClient(FirmClientDto updatedClient) => await http.PutAsJsonAsync($"api/client/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteClient() => await http.DeleteAsync($"api/client/delete/{_selectedClient.Id}");

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}
