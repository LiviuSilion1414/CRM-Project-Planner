@page "/contacts"
@inject HttpClient http

<h3>Contacts</h3>

@*
<MasterDetailView 
TItem="FirmClientDto" Properties="_selectedColumns" Data="_clients"
OnItemSelected="OnItemSelected" OnEditSelected="@IsEditSelected" OnDeleteSelected="@IsDeleteSelected"
AllowPaging="true" AllowFiltering="true" AllowSorting="true" DisplayCount="OnDisplayCountSet" OnLoadMoreItems="LoadMoreItems">
    <AdditionalContent Context="additionalcontent">
        @if (_isEditSelected && _selectedClient is not null)
        {
            <FormView TItem="@FirmClientDto" Model="@_selectedClient" OnUpdatedItem="@UpdateItem">
                <FormContent Context="formcontent">
                    <div class="form-group">
                        <label>@nameof(_selectedClient.Name):</label>
                        <InputText @bind-Value="@_selectedClient.Name"/>
                    </div>
                    <div class="form-group">
                        <label>@nameof(_selectedClient.VatNumber):</label>
                        <InputText @bind-Value="@_selectedClient.VatNumber" />
                    </div>
                </FormContent>
            </FormView>
        }
        else if (_isDeleteSelected)
        {
            <AlertComponent IsDeleteConfirmed="OnDeleteConfirmed"/>
        }

        else
        {
            <p>Select one action from above!</p>
        }
    </AdditionalContent>
</MasterDetailView>
*@


<DataGridView TItem="@FirmClientDto" Data="@_clients" Properties="@_selectedColumns" />

@code {
    private List<FirmClientDto> _clients;
    private List<string> _selectedColumns = ["Name", "VatNumber"];

    private FirmClientDto _selectedClient = null;

    private bool _isAddClicked = false;
    private bool _isEditSelected = false;
    private bool _isDeleteSelected = false;
    private bool _isReloadRequired = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataFromServer();
    }

    private async Task OnDisplayCountSet(int displayCount)
    {
        await LoadDataFromServer(displayCount);
    }

    private async Task LoadMoreItems(PaginationHelper paginationHelper)
    {
        await LoadDataFromServer(paginationHelper);
    }

    private void OnItemSelected(FirmClientDto client) => _selectedClient = client;

    private void IsAddClicked() => _isAddClicked = !_isAddClicked;

    private void IsEditSelected(bool value) => _isEditSelected = value;

    private void IsDeleteSelected(bool value) => _isDeleteSelected = value;

    private async Task UpdateItem(FirmClientDto updatedClient)
    {
        await http.PutAsJsonAsync<FirmClientDto>($"api/client/edit/{updatedClient.Id}", updatedClient);
        StateHasChanged();
    }

    private async Task OnDeleteConfirmed(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await http.DeleteAsync($"api/client/delete/{_selectedClient.Id}");
        }
    }

    private async Task LoadDataFromServer(int displayCount = 25)
    {
        _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{displayCount}/{0}");
        _isReloadRequired = !_isReloadRequired;
    }

    private async Task LoadDataFromServer(PaginationHelper paginationHelper)
    {
        var newLoadedClients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
        newLoadedClients.ForEach(e => _clients.Add(e));
        _isReloadRequired = !_isReloadRequired;
    }
}
