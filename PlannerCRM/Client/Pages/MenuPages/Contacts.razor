@page "/contacts"

<h3>Clients</h3>
<PageTitle>Clients</PageTitle>

<CascadingValue Value="@_dataContainer">
    <DataGridView TItem="@FirmClientDto"
                  GetCascadingContainerStates="@GetCascadingContainerStates" />
    <DataGridViewItemHandler TItem="@FirmClientDto"
                             AddAction="@(async client => await ClientFetchService.Create(CrudApiManager.ADD, client))"
                             UpdateAction="@(async client => await ClientFetchService.Update(CrudApiManager.EDIT, client))"
                             DeleteAction="@(async client => await DeleteClient(client))"
                             DeleteMultipleAction="@(async clients => await DeleteMultipleClients(clients))">
        <AddFormMarkup>
            <FirmClientAddForm />
        </AddFormMarkup>
        <EditFormMarkup>
            <FirmClientEditForm />
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <FirmClientViewForm />
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    [Inject] public IFetchService<FirmClientDto> ClientFetchService { get; set; }
    [Inject] public IFetchService<WorkOrderDto> WorkOrderFetchService { get; set; }

    private CascadingDataContainer<FirmClientDto> _dataContainer = new()
        {
            DataManager = new()
            {
                SelectedProperties = ["Name", "VatNumber"]
            }
        };

    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private void GetCascadingContainerStates(CascadingDataContainer<FirmClientDto> dataContainer)
        => _dataContainer = dataContainer;

    private async Task DeleteClient(FirmClientDto client)
        => await ClientFetchService.Delete(CrudApiManager.DELETE, client.Id);

    private async Task DeleteMultipleClients(IEnumerable<FirmClientDto> clients)
    {
        foreach (var client in clients)
        {
            await DeleteClient(client);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
        => _dataContainer.DataManager.MainItems =
            await ClientFetchService.GetAll(CrudApiManager.GET_WITH_PAGINATION, paginationHelper.Offset, paginationHelper.Limit);
}