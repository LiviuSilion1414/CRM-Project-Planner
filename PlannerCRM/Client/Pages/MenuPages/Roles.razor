@page "/roles"

<h3>Roles</h3>
<PageTitle>Roles</PageTitle>

<RadzenCard class="mb-3">
    <RadzenRow JustifyContent="JustifyContent.Stretch">
        <RadzenColumn>
            <RadzenFormField Text="Role Name" AllowFloatingLabel="false">
                <RadzenTextBox class="form-control" Style="min-width: 30vw;" @bind-Value="@query" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenButton Icon="search_off" ButtonStyle="ButtonStyle.Info" Variant="Variant.Filled" Text="Reset" Click="@ResetData"></RadzenButton>
            <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Text="Search" Click="@LoadData"></RadzenButton>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<RadzenDataGrid @ref="grid"
                TItem="RoleDto"
                Data="roles"
                SelectionMode="DataGridSelectionMode.Single"
                AllowSorting="true"
                AllowAlternatingRows="true">
    <HeaderTemplate>
        <EditForm EditContext="editContext" OnValidSubmit="AddRole">
            <DataAnnotationsValidator />
            <RadzenRow class="mt-3" JustifyContent="JustifyContent.Stretch">
                <RadzenColumn>
                    <RadzenFormField Text="Role Name">
                        <InputText class="form-control" @bind-Value="model.roleName" style="min-width: 30vw;" />
                    </RadzenFormField>
                    <ValidationMessage For="@(() => model.roleName)" />
                </RadzenColumn>
                <RadzenColumn>
                    @if (isUpdate)
                    {
                        <RadzenButton ButtonType="ButtonType.Reset"
                                      Icon="cancel"
                                      Text="Cancel"
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Variant="Variant.Flat"
                                      Click="@(() => ToggleUpdate(new()))">
                        </RadzenButton>
                        <RadzenButton ButtonType="ButtonType.Submit"
                                      Icon="send"
                                      Text="Save changes"
                                      ButtonStyle="ButtonStyle.Primary"
                                      Variant="Variant.Flat"
                                      Click="UpdateRole">
                        </RadzenButton>
                    }
                    else
                    {
                        <RadzenButton ButtonType="ButtonType.Submit"
                                      Icon="add_circle_outline"
                                      IconColor="@Colors.Success"
                                      Text="Add Role"
                                      Click="AddRole">
                        </RadzenButton>
                    }
                </RadzenColumn>
            </RadzenRow>
        </EditForm>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.id)" Title="Identifier" />
        <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.roleName)" Title="Role" />
        <RadzenDataGridColumn TItem="RoleDto" Width="64px">
            <Template Context="data">
                <RadzenButton Variant="Variant.Filled" Icon="edit" ButtonStyle="ButtonStyle.Info" Click="@(() => ToggleUpdate(data))"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RoleDto" Width="64px">
            <Template Context="data">
                <RadzenButton Variant="Variant.Filled" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteRole(data))"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    RadzenDataGrid<RoleDto> grid;
    List<RoleDto> roles = new();
    RoleDto model;
    EditContext editContext;

    bool isUpdate = false;
    string query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        model = new();
        editContext = new(model);
        await LoadData();
    }

    void ToggleUpdate(RoleDto role)
    {
        isUpdate = !isUpdate;
        model = isUpdate ? role : new();
    }

    async Task ResetData()
    {
        query = string.Empty;
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new RoleFilterDto
                {
                    searchQuery = query
                };

            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                roles = JsonSerializer.Deserialize<List<RoleDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task AddRole()
    {
        try
        {
            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_INSERT, model, ApiType.Post);
            if (result.hasCompleted)
            {
                notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                await LoadData();
                await grid.Reload();
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task UpdateRole()
    {
        try
        {
            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_UPDATE, model, ApiType.Put);
            if (result.hasCompleted)
            {
                notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                await LoadData();
                await grid.Reload();
                ToggleUpdate(new RoleDto());
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task DeleteRole(RoleDto role)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal?", "Delete role")).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_DELETE, new RoleFilterDto() { roleId = role.id }, ApiType.Post);
                if (result.hasCompleted)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                    await grid.Reload();
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}
