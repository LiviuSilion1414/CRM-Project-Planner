@page "/roles"

<h3>Roles</h3>
<PageTitle>Roles</PageTitle>

<RadzenCard class="mb-3">
    <RadzenRow JustifyContent="JustifyContent.Stretch">
        <RadzenColumn>
            <RadzenFormField Text="Role Name" AllowFloatingLabel="false">
                <RadzenTextBox class="form-control" Style="min-width: 30vw;" @bind-Value="@query" />
            </RadzenFormField>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenButton Icon="search_off" ButtonStyle="ButtonStyle.Info" Variant="Variant.Filled" Text="Reset" Click="@ResetData"></RadzenButton>
            <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Text="Search" Click="@LoadData"></RadzenButton>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

<RadzenDataGrid @ref="grid"
TItem="RoleDto"
Data="roles"
SelectionMode="DataGridSelectionMode.Single"
AllowSorting="true"
AllowAlternatingRows="true">
    <HeaderTemplate>
        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Text="Add" Click="@(() => OnAddEdit(new RoleDto()))"></RadzenButton>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.id)" Title="Identifier" />
        <RadzenDataGridColumn TItem="RoleDto" Property="@nameof(RoleDto.roleName)" Title="Role" />
        <RadzenDataGridColumn TItem="RoleDto" Width="64px">
            <Template Context="data">
                <RadzenButton Variant="Variant.Filled" Icon="edit" ButtonStyle="ButtonStyle.Info" Click="@(() => OnAddEdit(data))"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="RoleDto" Width="64px">
            <Template Context="data">
                <RadzenButton Variant="Variant.Filled" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteRole(data))" Disabled="!data.isRemoveable.Value"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    RadzenDataGrid<RoleDto> grid;
    List<RoleDto> roles = new();

    string query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task ResetData()
    {
        query = string.Empty;
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var filter = new RoleFilterDto
                {
                    searchQuery = query
                };

            var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                roles = JsonSerializer.Deserialize<List<RoleDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnAddEdit(RoleDto role)
    {
        await dialog.OpenAsync<RoleForm>("Add/UpdateRole",
            new Dictionary<string, object>()
            {
                { nameof(RoleForm.Model), role },
                { nameof(RoleForm.OnReloadList), EventCallback.Factory.Create(this, LoadData) }
            });
    }

    private async Task DeleteRole(RoleDto role)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal?", "Delete role")).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ROLE_CONTROLLER, ApiUrl.ROLE_DELETE, new RoleFilterDto() { roleId = role.id }, ApiType.Post);
                if (result.hasCompleted)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

}
