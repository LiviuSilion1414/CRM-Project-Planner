@page "/calendar"

@inject DialogService ds
@inject FetchService<ActivityDto> fs

<RadzenScheduler TItem="ActivityDto"
                 Style="height: 90vh;"
                 Data=@_activities
                 Culture="CultureInfo.InvariantCulture"
                 SlotSelect="@OnAdd"
                 AppointmentSelect="@OnSelect"
                 StartProperty="@nameof(ActivityDto.StartDate)"
                 EndProperty="@nameof(ActivityDto.EndDate)"
                 TextProperty="@nameof(ActivityDto.Name)"
                 SelectedIndex="2">
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private List<ActivityDto> _activities = new();
    private PaginationHelper _pg = new() { Limit = 100, Offset = 0 };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _activities = await fs.GetAll(
            EndpointsNames.ACTIVITY,
            EndpointCrudActions.GET_WITH_PAGINATION_ACTION,
            _pg.Limit,
            _pg.Offset
        );
    }

    private async Task OnSelect(SchedulerAppointmentSelectEventArgs<ActivityDto> args)
    {
        await ds.OpenAsync<ActivityDialog>("Activity Information",
            new Dictionary<string, object>() { { nameof(ActivityDialog.SelectedActivity), args.Data } },
            new DialogOptions() { Width = "40vw;" }
        );
    }

    private async Task OnAdd(SchedulerSlotSelectEventArgs args)
    {
        await ds.OpenAsync<ActivityAddForm>("Add Activity",
            new()
                {
                { nameof(ActivityAddForm.StartDate), args.Start },
                { nameof(ActivityAddForm.EndDate), args.End }
                },
            new DialogOptions() { Width = "40vw;" }
        );
    }
}