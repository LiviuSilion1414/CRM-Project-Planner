@page "/workOrders"
@inject HttpClient http

<h3>Workorders</h3>
<PageTitle>Workorders</PageTitle>

<CascadingValue Value="@_dataContainer">
    <DataGridView 
        TItem="@WorkOrderDto"
        GetCascadingContainerStates="@GetCascadingContainerStates"
        ShouldFetchNewData="@ReloadUpdatedData" />
    <DataGridViewItemHandler 
        TItem="@WorkOrderDto"
        AddAction="@(async workOrder => await AddWorkOrder(workOrder))"
        UpdateAction="@(async workOrder => await UpdateWorkOrder(workOrder))"
        DeleteAction="@(async workOrder => await DeleteWorkOrder(workOrder))"
        DeleteMultipleAction="@(async workOrders => await DeleteMultipleClients(workOrders))">
        <AddFormMarkup>
            <WorkOrderAddForm DataContainer="@_dataContainer"/>
        </AddFormMarkup>
        <EditFormMarkup>
            <WorkOrderEditForm DataContainer="@_dataContainer" />
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <WorkOrderViewForm DataContainer="@_dataContainer" Activities="@_activities" />
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    private CascadingDataContainer<WorkOrderDto> _dataContainer = new()
    {
        DataManager = new()
        {
            SelectedProperties = ["Name", "StartDate", "EndDate"]
        }
    };

    private List<ActivityDto> _activities = [];
    private List<FirmClientDto> _clients = [];

    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private async Task GetAssociatedActivities(WorkOrderDto workOrder)
        => _activities = await http.GetFromJsonAsync<List<ActivityDto>>(
                $"/api/workOrder/findAssociatedActivitiesByWorkOrderId/{workOrder.Id}");

    private async Task ReloadUpdatedData(bool shouldReload)
    {
        if (shouldReload)
        {
            await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
        }
    }

    private async Task GetCascadingContainerStates(CascadingDataContainer<WorkOrderDto> dataContainer)
    {
        await GetAssociatedActivities(dataContainer.DataManager.SelectedItem);
        _dataContainer = dataContainer;
    }

    private async Task AddWorkOrder(WorkOrderDto updatedClient)
        => await http.PostAsJsonAsync("api/workOrder/add", updatedClient);

    private async Task UpdateWorkOrder(WorkOrderDto updatedClient)
        => await http.PutAsJsonAsync($"api/workOrder/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteWorkOrder(WorkOrderDto workOrder)
        => await http.DeleteAsync($"api/workOrder/delete/{workOrder.Id}");

    private async Task DeleteMultipleClients(IEnumerable<WorkOrderDto> workOrders)
    {
        foreach (var workOrder in workOrders)
        {
            await DeleteWorkOrder(workOrder);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
       => _dataContainer.DataManager.MainItems = await 
            http.GetFromJsonAsync<List<WorkOrderDto>>(
               $"/api/workOrder/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
}
