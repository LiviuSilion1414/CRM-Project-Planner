@page "/workOrders"

<h3>Workorders</h3>
<PageTitle>Workorders</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Add" Click="@OnAdd"></RadzenButton>

    <RadzenDataGrid Data="@_workOrders"
                    TItem="@WorkOrderDto"
                    AllowSorting="true"
                    AllowPaging="true"
                    AllowFiltering="true"
                    SelectionMode="DataGridSelectionMode.Single"
                    RowSelect="OnSelect">
        <Columns>
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.name)" Title="Name" />
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.startDateString)" Title="Start Date" />
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.endDateString)" Title="End Date" />
            <RadzenDataGridColumn TItem="@WorkOrderDto" Width="64px">
                <Template Context="data">
                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Info" Icon="open_in_new" Click="@(() => OnSelect(data))"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="@WorkOrderDto" Width="64px">
                <Template Context="data">
                    <RadzenButton Variant="Variant.Text" IconColor="@Colors.Danger" Icon="delete" Click="@(() => OnDelete(data))"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<WorkOrderDto> _workOrders = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_LIST, new WorkOrderFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnSelect(WorkOrderDto workOrder)
    {
        await dialog.OpenAsync<WorkOrderDialog>("workOrder Info",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderDialog.SelectedWorkOrder), workOrder },
                { nameof(WorkOrderDialog.OnReloadList), EventCallback.Factory.Create(this, LoadData) },
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh", Draggable = true, Resizable = true }
        );
    }

    private async Task OnAdd()
    {
        await dialog.OpenAsync<WorkOrderForm>("Add WorkOrder",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderForm.OnReloadList), EventCallback.Factory.Create(this, LoadData) },
                { nameof(WorkOrderForm.IsInsert), true }
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh", Draggable = true, Resizable = true });
    }

    private async Task OnDelete(WorkOrderDto workOrder)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete workorder", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_DELETE,
                                                      new WorkOrderFilterDto() { workOrderId = workOrder.id },
                                                      ApiType.Put);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData();
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}