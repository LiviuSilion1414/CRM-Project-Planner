@page "/workOrders"

<h3>Work Orders</h3>
<PageTitle>Work Orders</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <WorkOrders_MasterDetail Clients="_clients"
    WorkOrders="_workOrders"
    OnSearch="LoadData"
    OnReset="ResetData"
    OnActivityOverview="OnSelect"
    OnAddWorkOrder="OnAdd"
    OnEditWorkOrder="OnEdit"
    OnDeleteWorkOrder="OnDelete">
    </WorkOrders_MasterDetail>
}

@code {
    private List<WorkOrderDto> _workOrders = new();
    private List<FirmClientDto> _clients = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await LoadData(new WorkOrderFilterDto());
    }

    private async Task LoadClients()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, new FirmClientFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task ResetData()
    {
        await LoadData(new WorkOrderFilterDto());
    }

    private async Task LoadData(WorkOrderFilterDto filter)
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnSelect(ActivityDto activity)
    {
        await dialog.OpenSideAsync<ActivityDialog>("Activity Info",
            new Dictionary<string, object>()
            {
                { nameof(ActivityDialog.SelectedActivity), activity },
                { nameof(ActivityDialog.OnReloadList), EventCallback.Factory.Create(this, () => LoadData(new WorkOrderFilterDto())) },
                { nameof(ActivityDialog.OnCloseSide), EventCallback.Factory.Create(this, dialog.CloseSide) }
            },
            new SideDialogOptions() { Width="40vw" }
        );
    }

    private async Task OnEdit(WorkOrderDto workOrder)
    {
        await dialog.OpenAsync<WorkOrderForm>("Edit WorkOrder",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderForm.Model), workOrder },
                { nameof(WorkOrderForm.IsInsert), false },
                { nameof(WorkOrderForm.OnReloadList), EventCallback.Factory.Create(this, () => LoadData(new WorkOrderFilterDto())) },
                { nameof(WorkOrderForm.OnCloseSide), EventCallback.Factory.Create(this, dialog.CloseSide) }
            },
            new DialogOptions() { Width = "80vw;", Height = "70vh" });
    }

    private async Task OnAdd()
    {
        await dialog.OpenAsync<WorkOrderForm>("Add WorkOrder",
            new Dictionary<string, object>()
                                {
                { nameof(WorkOrderForm.OnReloadList), EventCallback.Factory.Create(this, () => LoadData(new WorkOrderFilterDto())) },
                { nameof(WorkOrderForm.OnCloseSide), EventCallback.Factory.Create(this, dialog.CloseSide) },
                { nameof(WorkOrderForm.IsInsert), true }
                                },
            new DialogOptions() { Width = "80vw;", Height = "40vh" });
    }

    private async Task OnDelete(WorkOrderDto workOrder)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete workorder", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_DELETE,
                                                      new WorkOrderFilterDto() { workOrderId = workOrder.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData(new WorkOrderFilterDto());
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}