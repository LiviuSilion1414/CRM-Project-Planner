@page "/workOrders"
@inject DialogService ds
@inject FetchService<WorkOrderDto> fs
@inject FetchService<ActivityDto> afs

<h3>Workorders</h3>
<PageTitle>Workorders</PageTitle>

<RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Add" Click="@OnAdd"></RadzenButton>

<RadzenDataGrid Data="@_workOrders"
TItem="@WorkOrderDto"
AllowSorting="true"
AllowPaging="true"
AllowFiltering="true"
SelectionMode="DataGridSelectionMode.Single"
RowSelect="OnSelect">
    <Columns>
        <RadzenDataGridColumn TItem="@WorkOrderDto" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.StartDateString)" Title="Start Date" />
        <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.EndDateString)" Title="End Date" />
    </Columns>
</RadzenDataGrid>

@code {
    private WorkOrderDto _selectedWorkOrder = null;
    private List<WorkOrderDto> _workOrders = new();
    private PaginationHelper _pg = new() { Limit = 100, Offset = 0 };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _workOrders = await fs.GetAll(
            EndpointsNames.WORK_ORDER,
            EndpointCrudActions.GET_WITH_PAGINATION_ACTION,
            _pg.Limit,
            _pg.Offset
        );

        await LoadRelatedActivities();
    }

    private async Task LoadRelatedActivities()
    {
        foreach (var wo in _workOrders)
        {
            wo.Activities = await afs.GetAll(
                EndpointsNames.WORK_ORDER,
                WorkOrderEndpointActions.FindAssociatedActivitiesByWorkOrderId(wo.Id)
            );
        }
    }

    private async Task OnSelect(WorkOrderDto workOrder)
    {
        _selectedWorkOrder = workOrder;

        await ds.OpenAsync<WorkOrderDialog>("WorkOrder Info",
            new Dictionary<string, object>() { { nameof(WorkOrderDialog.SelectedWorkOrder), _selectedWorkOrder } },
            new DialogOptions() { Width="50vw;" }       
        );
    }

    private async Task OnAdd()
    {
        await ds.OpenAsync<WorkOrderAddForm>("Add WorkOrder", null, new DialogOptions() { Width="40vw;" });
    }
}