@page "/workOrders"
@inject HttpClient http

<DataGridView TItem="@WorkOrderDto"
DataContainer="@_dataContainer"
Data="@_workOrders"
Properties="@_selectedColumnsForWorkOrder"
GetCascadingContainerStates="@GetCascadingContainerStates"
ShouldFetchNewData="@ReloadUpdatedData" />

<CascadingValue Value="@_dataContainer">
    <DataGridViewItemHandler TItem="@WorkOrderDto"
    AddAction="@(async workOrder => await AddWorkOrder(workOrder))"
    UpdateAction="@(async workOrder => await UpdateWorkOrder(workOrder))"
    DeleteAction="@(async workOrder => await DeleteWorkOrder(workOrder))"
    DeleteMultipleAction="@(async workOrders => await DeleteMultipleClients(workOrders))">
        <AddFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.NewItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.NewItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.NewItem.StartDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.NewItem.StartDate" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.NewItem.EndDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.NewItem.EndDate" />
            </div>
            <br />
            <h5>Client Information</h5>
            <div class="form-group">
                @if (_client is null)
                {
                    <div style="margin: 0;">
                        <div style="float: left;">
                            <InputText type="search" class="form-control" @bind-value="@_query" />
                        </div>
                        <div style="float: left;">
                            <button class="btn btn-outline-primary" @onclick="@SearchClient">
                                <i class="bi bi-search"></i>
                                Search
                            </button>
                        </div>
                    </div>
                    @if (_clients is not null)
                    {
                        <div class="list-group">
                            @foreach (var client in _clients)
                            {
                                <button type="button" class="list-group-item list-group-item-action @(_client is not null ? "active" : string.Empty)"
                                @onclick="@(() => SelectClient(client))">
                                    @client.Name
                                </button>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="card" style="margin: 0;">
                        <div style="float: left;">
                            <p><strong>Name: </strong>@_dataContainer.NewItem.FirmClient.Name</p>
                            <p><strong>VatNumber: </strong>@_dataContainer.NewItem.FirmClient.VatNumber</p>
                        </div>
                        <div style="float: left;">
                            <button class="btn btn-outlien-danger" @onclick="@(() => SelectClient(null))">
                                <i class="bi bi-trash3"></i>
                                Remove
                            </button>
                        </div>
                    </div>
                }
            </div>
        </AddFormMarkup>
        <EditFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.SelectedItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.SelectedItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.SelectedItem.StartDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.SelectedItem.StartDate" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.SelectedItem.EndDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.SelectedItem.EndDate" />
            </div>
        </EditFormMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    private List<WorkOrderDto> _workOrders;
    private List<string> _selectedColumnsForWorkOrder = ["Name", "StartDate", "EndDate"];

    private CascadingDataContainer<WorkOrderDto> _dataContainer = new()
    {
        NewItem = new()
        {
            FirmClient = new(),
            WorkOrderCost = new(),
            Activities = [],
        },
        SelectedItem = new ()
        {
            FirmClient = new(),
            WorkOrderCost = new(),
            Activities = []
        },
        SelectedItems = []
    };

       /*
       *
    */
    private List<FirmClientDto> _clients = [];
    private FirmClientDto _client = null;
    private string _query = string.Empty;
    /*
    *
     */

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

        Console.WriteLine(_dataContainer.NewItem is null);
    }

    private async Task SearchClient()
    {
        if (!string.IsNullOrEmpty(_query))
        {
            _clients = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/searchClientByName/{_query}");
        }
    }

    private void SelectClient(FirmClientDto client)
    {
        _client = client;
        _dataContainer.NewItem.FirmClient = client;
        _dataContainer.NewItem.FirmClientId = client.Id;
    }

    private async Task ReloadUpdatedData(bool shouldReload)
    {
        if (shouldReload)
        {
            await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
        }
    }

    private void GetCascadingContainerStates(CascadingDataContainer<WorkOrderDto> dataContainer) => _dataContainer = dataContainer;

    private async Task AddWorkOrder(WorkOrderDto updatedClient) => await http.PostAsJsonAsync("api/workOrder/add", updatedClient);

    private async Task UpdateWorkOrder(WorkOrderDto updatedClient) => await http.PutAsJsonAsync($"api/workOrder/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteWorkOrder(WorkOrderDto workOrder) => await http.DeleteAsync($"api/workOrder/delete/{workOrder.Id}");

    private async Task DeleteMultipleClients(IEnumerable<WorkOrderDto> workOrders)
    {
        foreach (var workOrder in workOrders)
        {
            await DeleteWorkOrder(workOrder);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _workOrders = await http.GetFromJsonAsync<List<WorkOrderDto>>($"/api/workOrder/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}
