@page "/workOrders"

<h3>Work Orders</h3>
<PageTitle>Work Orders</PageTitle>

@if (fetch.IsBusy)
{
    <Loader />
}
else
{
    <RadzenCard>
        @if ((isInsert || isEdit || isView || isActivityView) && (_selectedWorkOrder is not null || _selectedActivity is not null))
        {
            <RadzenRow>
                <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12">
                    <RadzenButton Icon="chevron_left" ButtonStyle="ButtonStyle.Primary" Text="Back to list" Click="ResetFlags"></RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        }

        @if (isInsert && _selectedWorkOrder is not null)
        {
            <WorkOrderForm Model="@_selectedWorkOrder" IsInsert="true" OnReloadList="@(() => LoadData(new WorkOrderFilterDto()))" />
        }
        else if (isEdit && _selectedWorkOrder is not null)
        {
            <WorkOrderForm Model="@_selectedWorkOrder" IsInsert="false" OnReloadList="@(() => LoadData(new WorkOrderFilterDto()))" />
        }
        else if (isView && _selectedWorkOrder is not null)
        {
            <WorkOrderDialog SelectedWorkOrder="_selectedWorkOrder" OnReloadList="@(() => LoadData(new WorkOrderFilterDto()))" />
        }
        else if (isActivityView && _selectedActivity is not null)
        {
            <ActivityDialog SelectedActivity="_selectedActivity" OnReloadList="@(() => LoadData(new WorkOrderFilterDto()))" />
        }
        else
        {
            <WorkOrders_MasterDetail Clients="_clients"
                                     WorkOrders="_workOrders"
                                     OnSearch="LoadData"
                                     OnReset="ResetData"
                                     OnActivityOverview="OnSelectActivity"
                                     OnAddWorkOrder="OnAdd"
                                     OnEditWorkOrder="OnEdit"
                                     OnDeleteWorkOrder="OnDelete">
            </WorkOrders_MasterDetail>
        }
    </RadzenCard>
}

@code
{
    private List<WorkOrderDto> _workOrders = new();
    private List<FirmClientDto> _clients = new();

    WorkOrderDto? _selectedWorkOrder = new WorkOrderDto();
    ActivityDto? _selectedActivity = new ActivityDto();

    private bool isInsert = false;
    private bool isView = false;
    private bool isEdit = false;
    private bool isActivityView = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await LoadData(new WorkOrderFilterDto());
    }

    private async Task LoadClients()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.CLIENT_CONTROLLER, ApiUrl.CLIENT_LIST, new FirmClientFilterDto(), ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _clients = JsonSerializer.Deserialize<List<FirmClientDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    async Task ResetData()
    {
        await LoadData(new WorkOrderFilterDto());
    }

    private async Task LoadData(WorkOrderFilterDto filter)
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_LIST, filter, ApiType.Post);
            if (result.data is not null && result.hasCompleted && result.messageType == MessageType.Success)
            {
                _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void ResetFlags()
    {
        isActivityView = false;
        isView = false;
        isEdit = false;
        isInsert = false;
        _selectedWorkOrder = null;
        _selectedActivity = null;
    }

    void OnAdd()
    {
        _selectedWorkOrder = new();
        isInsert = !isInsert;
    }

    void OnEdit(WorkOrderDto workOrder)
    {
        _selectedWorkOrder = workOrder;
        isEdit = !isEdit;
    }

    void OnSelect(WorkOrderDto workOrder)
    {
        _selectedWorkOrder = workOrder;
        isView = !isView;
    }

    void OnSelectActivity(ActivityDto activity)
    {
        _selectedActivity = activity;
        isActivityView = !isActivityView;
    }

    private async Task OnDelete(WorkOrderDto workOrder)
    {
        try
        {
            if ((await dialog.Confirm("Confirm this item removal", "Delete workorder", null)).Value)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_DELETE,
                                                      new WorkOrderFilterDto() { workOrderId = workOrder.id },
                                                      ApiType.Post);
                if (result.hasCompleted && result.messageType == MessageType.Success)
                {
                    notification.Notify(NotificationSeverity.Success, result.message, null, 4000);
                    await LoadData(new WorkOrderFilterDto());
                }
                else
                {
                    notification.Notify(NotificationSeverity.Error, result.message, null, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }
}