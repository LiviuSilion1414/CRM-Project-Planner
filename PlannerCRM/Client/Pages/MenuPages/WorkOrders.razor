@page "/workOrders"

<h3>Workorders</h3>
<PageTitle>Workorders</PageTitle>

@if (fetch.IsBusy)
{
    <Loader/>
}
else
{
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Outlined" Text="Add" Click="@OnAdd"></RadzenButton>

    <RadzenDataGrid Data="@_workOrders"
    TItem="@WorkOrderDto"
    AllowSorting="true"
    AllowPaging="true"
    AllowFiltering="true"
    SelectionMode="DataGridSelectionMode.Single"
    RowSelect="OnSelect">
        <Columns>
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.name)" Title="Name" />
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.startDateString)" Title="Start Date" />
            <RadzenDataGridColumn TItem="@WorkOrderDto" Property="@nameof(WorkOrderDto.endDateString)" Title="End Date" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private WorkOrderDto _selectedWorkOrder = null;
    private List<WorkOrderDto> _workOrders = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            fetch.IsBusy = true;

            var result = await fetch.ExecuteAsync(ApiUrl.WORKORDER_CONTROLLER, ApiUrl.WORKORDER_LIST, new WorkOrderFilterDto(), ApiType.Post);
            if (result.data is not null)
            {
                _workOrders = JsonSerializer.Deserialize<List<WorkOrderDto>>(result.data.ToString());
            }
            await LoadRelatedActivities();
            fetch.IsBusy = false;
        }
        catch 
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task LoadRelatedActivities()
    {
        try
        {
            fetch.IsBusy = true;

            foreach (var wo in _workOrders)
            {
                var result = await fetch.ExecuteAsync(ApiUrl.ACTIVITY_CONTROLLER, ApiUrl.ACTIVITY_LIST, new WorkOrderFilterDto(), ApiType.Post);
                wo.activities = JsonSerializer.Deserialize<List<ActivityDto>>(result.data.ToString());
            }
            fetch.IsBusy = false;
        }
        catch 
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private async Task OnSelect(WorkOrderDto workOrder)
    {
        _selectedWorkOrder = workOrder;

        await dialog.OpenAsync<WorkOrderDialog>("workOrder Info",
            new Dictionary<string, object>() 
            { 
                { nameof(WorkOrderDialog.SelectedWorkOrder), _selectedWorkOrder } 
            },
            new DialogOptions() { Width = "50vw;" }
        );
    }

    private async Task OnAdd()
    {
        await dialog.OpenAsync<WorkOrderAddForm>("Add WorkOrder",
            new Dictionary<string, object>()
            {
                { nameof(WorkOrderAddForm.OnReloadList), LoadData() }
            },
            new DialogOptions() { Width = "40vw;" });
    }
}