@page "/workOrders"
@inject HttpClient http

<CascadingValue Value="@_dataContainer">
    <DataGridView TItem="@WorkOrderDto"
    TTemp="@FirmClientDto"
    GetCascadingContainerStates="@GetCascadingContainerStates"
    ShouldFetchNewData="@ReloadUpdatedData" />
    <DataGridViewItemHandler TItem="@WorkOrderDto"
    TTemp="@FirmClientDto"
    AddAction="@(async workOrder => await AddWorkOrder(workOrder))"
    UpdateAction="@(async workOrder => await UpdateWorkOrder(workOrder))"
    DeleteAction="@(async workOrder => await DeleteWorkOrder(workOrder))"
    DeleteMultipleAction="@(async workOrders => await DeleteMultipleClients(workOrders))">
        <AddFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.NewItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.NewItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.NewItem.StartDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.DataManager.NewItem.StartDate" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.NewItem.EndDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.DataManager.NewItem.EndDate" />
            </div>
            <br />
            <h5>Client Information</h5>
            <div class="form-group">
                @if (string.IsNullOrEmpty(_dataContainer.DataManager.TempItem.Name))
                {
                    <div style="margin: 0;">
                        <div style="float: left;">
                            <InputText type="search" class="form-control" @bind-value="@_dataContainer.QueryManager.Query" />
                        </div>
                        <div style="float: left;">
                            <button class="btn btn-outline-primary" @onclick="@SearchClient">
                                <i class="bi bi-search"></i>
                                Search
                            </button>
                        </div>
                    </div>
                    <div class="list-group">
                        @foreach (var client in _dataContainer.DataManager.TempItems)
                        {
                            <button type="button" class="list-group-item list-group-item-action @(_dataContainer.DataManager.TempItem is not null ? "active" : string.Empty)"
                            @onclick="@(() => SelectClient(client))">
                                @client.Name
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="card" style="margin: 0;">
                        <div style="float: left;">
                            <p><strong>Name: </strong>@_dataContainer.DataManager.TempItem.Name</p>
                            <p><strong>VatNumber: </strong>@_dataContainer.DataManager.TempItem.VatNumber</p>
                        </div>
                        <div style="float: left;">
                            <button class="btn btn-outlien-danger" @onclick="@(() => SelectClient(null))">
                                <i class="bi bi-trash3"></i>
                                Remove
                            </button>
                        </div>
                    </div>
                }
            </div>
        </AddFormMarkup>
        <EditFormMarkup>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.SelectedItem.Name):</label>
                <InputText class="form-control" @bind-Value="@_dataContainer.DataManager.SelectedItem.Name" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.SelectedItem.StartDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.DataManager.SelectedItem.StartDate" />
            </div>
            <div class="form-group">
                <label>@nameof(_dataContainer.DataManager.SelectedItem.EndDate):</label>
                <InputDate class="form-control" @bind-Value="@_dataContainer.DataManager.SelectedItem.EndDate" />
            </div>
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <!-- To do -->
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    private CascadingDataContainer<WorkOrderDto, FirmClientDto> _dataContainer = new() 
    { 
        DataManager = new ()
        {
            SelectedProperties = ["Name", "StartDate", "EndDate"]
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
    }

    private async Task SearchClient()
    {
        if (_dataContainer.QueryManager.HasQuery)
        {
            _dataContainer.DataManager.TempItems = await http.GetFromJsonAsync<List<FirmClientDto>>($"/api/client/searchClientByName/{_dataContainer.QueryManager.Query}");
        }
    }

    private void SelectClient(FirmClientDto client)
    {
        _dataContainer.DataManager.TempItem = client;
        _dataContainer.DataManager.NewItem.FirmClientId = client.Id;
    }

    private async Task ReloadUpdatedData(bool shouldReload)
    {
        if (shouldReload)
        {
            await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });
        }
    }

    private void GetCascadingContainerStates(CascadingDataContainer<WorkOrderDto, FirmClientDto> dataContainer) => _dataContainer = dataContainer;

    private async Task AddWorkOrder(WorkOrderDto updatedClient) => await http.PostAsJsonAsync("api/workOrder/add", updatedClient);

    private async Task UpdateWorkOrder(WorkOrderDto updatedClient) => await http.PutAsJsonAsync($"api/workOrder/edit/{updatedClient.Id}", updatedClient);

    private async Task DeleteWorkOrder(WorkOrderDto workOrder) => await http.DeleteAsync($"api/workOrder/delete/{workOrder.Id}");

    private async Task DeleteMultipleClients(IEnumerable<WorkOrderDto> workOrders)
    {
        foreach (var workOrder in workOrders)
        {
            await DeleteWorkOrder(workOrder);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
    {
        _dataContainer.DataManager.MainItems = await http.GetFromJsonAsync<List<WorkOrderDto>>($"/api/workOrder/getWithPagination/{paginationHelper.Limit}/{paginationHelper.Offset}");
    }
}
