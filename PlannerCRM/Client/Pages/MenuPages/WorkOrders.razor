@page "/workOrders"

<h3>Workorders</h3>
<PageTitle>Workorders</PageTitle>

<CascadingValue Value="@_dataContainer">
    <DataGridView TItem="@WorkOrderDto"
                  GetCascadingContainerStates="@GetCascadingContainerStates" />
    <DataGridViewItemHandler TItem="@WorkOrderDto"
                             AddAction="@(async workOrder => await WorkOrderFetchService.Create(CrudApiManager.ADD, workOrder))"
                             UpdateAction="@(async workOrder => await WorkOrderFetchService.Update(CrudApiManager.EDIT, workOrder))"
                             DeleteAction="@(async workOrder => await DeleteWorkOrder(workOrder))"
                             DeleteMultipleAction="@(async workOrders => await DeleteMultipleClients(workOrders))">
        <AddFormMarkup>
            <WorkOrderAddForm />
        </AddFormMarkup>
        <EditFormMarkup>
            <WorkOrderEditForm />
        </EditFormMarkup>
        <ViewDetailsMarkup>
            <WorkOrderViewForm />
        </ViewDetailsMarkup>
    </DataGridViewItemHandler>
</CascadingValue>

@code {
    [Inject] public IFetchService<WorkOrderDto> WorkOrderFetchService { get; set; }

    private CascadingDataContainer<WorkOrderDto> _dataContainer = new()
        {
            DataManager = new()
            {
                SelectedProperties = ["Name", "StartDate", "EndDate"]
            }
        };


    protected override async Task OnInitializedAsync()
        => await LoadData(new PaginationHelper { Limit = 100, Offset = 0 });

    private void GetCascadingContainerStates(CascadingDataContainer<WorkOrderDto> dataContainer)
        => _dataContainer = dataContainer;

    private async Task DeleteWorkOrder(WorkOrderDto workOrder)
        => await WorkOrderFetchService.Delete(CrudApiManager.DELETE, workOrder.Id);

    private async Task DeleteMultipleClients(IEnumerable<WorkOrderDto> workOrders)
    {
        foreach (var workOrder in workOrders)
        {
            await DeleteWorkOrder(workOrder);
        }
    }

    private async Task LoadData(PaginationHelper paginationHelper)
        => _dataContainer.DataManager.MainItems =
            await WorkOrderFetchService.GetAll(CrudApiManager.GET_WITH_PAGINATION, paginationHelper.Limit, paginationHelper.Offset);
}
