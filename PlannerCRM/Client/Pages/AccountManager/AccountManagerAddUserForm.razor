@page "/account-manager/add/user"

@using System.Globalization
@using PlannerCRM.Shared.DTOs.EmployeeDto.Forms
@using static PlannerCRM.Shared.Constants.ConstantValues
@using PlannerCRM.Shared.Models

@inject NavigationManager navManager
@inject HttpClient httpClient

@attribute [Authorize(Roles = nameof(Roles.ACCOUNT_MANAGER))]

<PageTitle>Account Manager - Add user</PageTitle>

<div class="container-fluid">
    <h1>Aggiungi utente</h1>
    <EditForm Model="@_model" OnValidSubmit="OnClickConfirm">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <span class="oi oi-person"></span>
            <label for="Nome">Nome</label>
            <input type="text" class="form-control" @bind="_model.FirstName"/>
        </div>
            <ValidationMessage For="@(() => _model.FirstName)"/>
        <div class="form-group">
            <span class="oi oi-person"></span>
            <label for="Cognome">Cognome</label>
            <input type="text" class="form-control" @bind="_model.LastName"/>
            <ValidationMessage For="@(() => _model.LastName)"/>
        </div>
        <div class="form-group">
            <span class="oi oi-envelope-closed"></span>
            <label for="Email">Email</label>
            <input type="email" class="form-control" @bind="_model.Email"/>
            <ValidationMessage For="@(() => _model.Email)" />
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data di nascita">Data di nascita</label>
            <input type="date" class="form-control" @bind="_model.BirthDay"/>
            <ValidationMessage For="@(() => _model.BirthDay)" />
        </div>
        <div class="form-group">
            <span class="oi oi-calendar"></span>
            <label for="Data d'inizio">Data d'inizio</label>
            <input type="date"class="form-control" @bind="@_model.StartDate"/>
            <ValidationMessage For="@(() => _model.StartDate)" />
        </div>
        <div class="form-group">
            <span class="oi oi-briefcase"></span>
            <label for="Codice fiscale">Codice fiscale</label>
            <input type="text" class="form-control" @bind="_model.NumericCode"/>
            <ValidationMessage For="@(() => _model.NumericCode)" />
        </div>
        <div class="form-group">
            <span class="oi oi-star"></span>
            <label for="Ruolo">Ruolo</label>
                <div class="form-control">
                    <select class="dropdown-item" @bind="_model.Role">
                        @foreach (var role in Enum.GetValues(typeof(Roles))) {
                            if ((Roles)role != Roles.ACCOUNT_MANAGER) {
                                <option value="@role">@role</option>
                            }
                        }
                    </select>
                </div>
                <ValidationMessage For="@(() => _model.Role)" />
        </div>
        <div class="form-group">
            <span class="oi oi-euro"></span>
            <label for="Tariffa oraria">Tariffa oraria</label>
            <input type="number" class="form-control" @bind="_model.HourlyRate"/>
            <ValidationMessage For="@(() => _model.HourlyRate)" />
            <div>
                <label>Da: 
                    <input type="date" class="form-control" @bind="_model.StartDateHourlyRate">
                </label>
                <ValidationMessage For="(() => _model.StartDateHourlyRate)"/>
                <label>A: 
                    <input type="date" class="form-control" @bind="_model.FinishDateHourlyRate">
                </label>
                <ValidationMessage For="(() => _model.FinishDateHourlyRate)"/>
            </div>
        </div>
        <div class="form-group">
            <span class="oi oi-key"></span>
            <div style="margin: 0 auto; margin: 10px 5px;">
                <label for="Password">Password</label>
                <input type="@TypeField" class="form-control" @bind="_model.Password"/>
                <input type="checkbox" style="float:left; margin-top: 5px;" @onclick="SwitchShowPassword"/>
                <span style="margin: 10px 5px;">Vedi password</span>
            </div>
            <ValidationMessage For="@(() => _model.Password)" />
        </div>
        <div class="wrapper-btn">
            <div class="btn-cancel">
                <button type="button" class="btn btn-link" @onclick="OnClickCancel">Annulla</button>
            </div>
            <div class="btn-confirm">
                <button type="submit" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private int MinAge { get; set; }
    private int MaxAge { get; set; }
    private bool IsError { get; set; }
    private string Message { get; set; }
    private bool IsCheckboxClicked { get; set; }
    private string TypeField = InputType.TEXT.ToString().ToLower();
    private EmployeeAddForm _model = new();

    public void SwitchShowPassword() {
        if (IsCheckboxClicked) {
            IsCheckboxClicked = false;
            TypeField = InputType.TEXT.ToString().ToLower();
        } else {
            IsCheckboxClicked = true;
            TypeField = InputType.PASSWORD.ToString().ToLower();
        }
    }

    private void OnClickCancel() {
        navManager.NavigateTo("/account-manager");
    }

    private async Task OnClickConfirm() {
        await Task.Run(() => { 
            var obj = new object();
            
            _model.EmployeeSalaries
                .Add(new EmployeeSalaryDto {
                    EmployeeId = _model.Id,
                    Salary = _model.HourlyRate ?? throw new NullReferenceException(),
                    StartDate = _model.StartDateHourlyRate ?? throw new NullReferenceException(),
                    FinishDate = _model.FinishDateHourlyRate ?? throw new NullReferenceException(),
                });
            }
        );

        var firstResponse = await httpClient.PostAsJsonAsync<EmployeeAddForm>("http://localhost:5032/account/add/user", _model);
        var secondResponse = await httpClient.PostAsJsonAsync<EmployeeAddForm>("http://localhost:5032/employee/add", _model);
        if (!firstResponse.IsSuccessStatusCode || 
            !secondResponse.IsSuccessStatusCode) {
            Message = await firstResponse.Content.ReadAsStringAsync();
        }

        navManager.NavigateTo("/account-manager");
    }
}