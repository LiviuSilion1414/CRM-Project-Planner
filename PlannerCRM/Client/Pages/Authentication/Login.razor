@page "/"
@page "/login"

@using PlannerCRM.Shared.Models
@using PlannerCRM.Shared.DTOs.EmployeeDto.Forms
@using PlannerCRM.Shared.DTOs.EmployeeDto.Views

@inject NavigationManager navManager
@inject HttpClient httpClient
@inject CustomAuthState authStateProvider

<PageTitle>Login</PageTitle>

<h3>Entra nel tuo account gestionale.</h3>

<div class="container">
    @if (IsError) {
        <span>@Message</span>
    } 
    <h4>Login</h4>
    <EditForm Model="@model" OnValidSubmit="LoginOnValidInput">
        <DataAnnotationsValidator/>
        
        <div class="form-group">
            <label class="form-label" for="Email">Email:</label>
            <InputText type="email" id="emailInput" class="form-control" @bind-Value="model.Email"/>
            <ValidationMessage For="@(() => model.Email)"/>
        </div>
        <div class="form-group">
            <label class="form-label" for="Email">Password:</label>
            <InputText type="password" id="passwordInput" class="form-control" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)"/>
        </div>
        <div class="wrapper">
            <button type="submit" class="btn btn-primary">Accedi</button>
        </div>
    </EditForm>
</div>

@code {
    private EmployeeLoginDTO model = new EmployeeLoginDTO();   
    private string Message { get; set; }
    private bool IsError { get; set; }

    private async Task LoginOnValidInput() {
        var response = await httpClient.PostAsJsonAsync<EmployeeLoginDTO>("http://localhost:5032/account/login", model);

        //var currentEmployee = await httpClient.GetFromJsonAsync<CurrentEmployee>($"http://localhost:5032/employee/get/id/{model.Email}");
        //if (currentEmployee == null) { IsError = true; Message="ERR: ID non trovato"; }
        
        if (response.IsSuccessStatusCode) {
            var rolesList = await httpClient.GetFromJsonAsync<IEnumerable<string>>("http://localhost:5032/account/user/role");

            foreach (var role in rolesList) {
                if (role == nameof(Roles.ACCOUNT_MANAGER)) {
                    navManager.NavigateTo("/account-manager", true);
                } else if (role == nameof(Roles.OPERATION_MANAGER)) {
                    navManager.NavigateTo("/operation-manager", true);
                } else if (role == nameof(Roles.PROJECT_MANAGER)) {
                    navManager.NavigateTo("/project-manager", true);
                } else if (role == nameof(Roles.SENIOR_DEVELOPER)) {
                    //navManager.NavigateTo($"/senior-developer/{currentEmployee.Id}", true);e
                    navManager.NavigateTo("/senior-developer", true);
                } else if (role == nameof(Roles.JUNIOR_DEVELOPER)) {
                    navManager.NavigateTo("/junior-developer", true);
                }
            }
        } else {
            IsError = true;
            Message = "Email o password non corrette. Riprovare.";
        }
    }
}

