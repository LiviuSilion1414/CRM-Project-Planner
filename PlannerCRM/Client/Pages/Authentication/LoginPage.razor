@page "/"
@page "/login"

@layout PublicLayout
@attribute [AllowAnonymous]

<PageTitle>Login Page</PageTitle>
<RadzenStack JustifyContent="Radzen.JustifyContent.Center" Class="rz-mx-auto rz-p-4" Style="max-width: 1440px; height: 100%;">
    <RadzenCard class="rz-shadow-5 rz-border-radius-4" style="padding: 0; overflow: hidden">
        <RadzenRow Gap="0">
            <RadzenColumn Size="12" SizeSM="6" Class="rz-background-color-primary rz-p-12">
                <RadzenText TextStyle="TextStyle.H5" style="color:#fff; margin-top:30px;" Text="Entra nella tua area privata" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="6" class="rz-p-12">
                <PageTitle>Login</PageTitle>
                <RadzenText Text="@("Login all'area riservata")" TextStyle="Radzen.Blazor.TextStyle.H5" class="mb-4" TagName="Radzen.Blazor.TagName.H2" />
                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenFormField Text="Username" Variant="@Variant.Outlined" class="w-100">
                            <RadzenTextBox Name="Username" @bind-Value="@_model.emailOrUsername" class="w-100" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenFormField Text="Password" Variant="Variant.Outlined" class="w-100">
                            <ChildContent>
                                <RadzenTextBox Name="Password" @bind-Value="@_model.password" Visible="@(!showPassword)" class="w-100" />
                                <RadzenPassword Name="Password" @bind-Value="@_model.password" Visible="@showPassword" class="w-100" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(showPassword ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                            </End>
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
                <br />
                <br />
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                        <RadzenButton ButtonType="ButtonType.Button" Click="@(OnLogin)" Text="Login" />
                        <RadzenButton Variant="Variant.Text" Text="Reset Password" Click="@(OnForgotPassword)" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    <RadzenText Text="PlannerCRM v1.0, Copyright Ⓒ 2025" TextStyle="Radzen.Blazor.TextStyle.Caption" TextAlign="Radzen.TextAlign.Center" Style="width: 100%; margin-top: 20px;" TagName="Radzen.Blazor.TagName.P" />
</RadzenStack>

@code
{
    private LoginDto _model;
    private EditContext _editContext;
    bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        _model = new();
        _editContext = new(_model);
    }

    void TogglePassword()
    {
        showPassword = !showPassword;
    }

    private async Task OnLogin()
    {
        try
        {
            if (_editContext.Validate())
            {
                ResultDto result = await auth.LoginAsync(_model);

                if (result.hasCompleted)
                {
                    var authenticationState = await auth.GetAuthenticationStateAsync();
                    notification.Notify(NotificationSeverity.Success, $"Welcome back, {authenticationState.User.Identity.Name}!", null, 4000);
                    navigation.NavigateTo("/home", true);
                }
                else
                {
                    notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", result.message, 4000);
                }
            }
        }
        catch
        {
            notification.Notify(NotificationSeverity.Warning, "Something went wrong, please retry", null, 4000);
        }
    }

    private void OnForgotPassword()
    {
        navigation.NavigateTo("/forgot-password");
    }
}
