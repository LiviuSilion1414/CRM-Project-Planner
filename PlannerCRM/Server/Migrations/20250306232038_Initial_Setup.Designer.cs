// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlannerCRM.Server.DataAccess;

#nullable disable

namespace PlannerCRM.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250306232038_Initial_Setup")]
    partial class Initial_Setup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "roles", new[] { "account_manager", "operation_manager", "project_manager", "senior_developer", "junior_developer" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActivityEmployee", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uuid");

                    b.HasKey("ActivitiesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("ActivityEmployee");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnd")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.FirmClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FirmClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkOrderCostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirmClientId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.ClientWorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirmClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ClientWorkOrders");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.EmployeeActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeActivities");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.WorkOrderActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderActivities");
                });

            modelBuilder.Entity("ActivityEmployee", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannerCRM.Server.Models.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Activity", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Activities")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.WorkOrder", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.FirmClient", "FirmClient")
                        .WithMany("WorkOrders")
                        .HasForeignKey("FirmClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirmClient");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.EmployeeActivity", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.Activity", "Activity")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannerCRM.Server.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.EmployeeRole", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannerCRM.Server.Models.Entities.Role", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.JoinEntities.WorkOrderActivity", b =>
                {
                    b.HasOne("PlannerCRM.Server.Models.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannerCRM.Server.Models.Entities.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Activity", b =>
                {
                    b.Navigation("EmployeeActivities");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeActivities");

                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.FirmClient", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.Role", b =>
                {
                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("PlannerCRM.Server.Models.Entities.WorkOrder", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
